{"version":3,"sources":["ngm.js","dashboard.js","provider.js","row.js","column.js","widget-content.js","widget.js","ngm-dashboard-framework.tpl.js","ngm-dashboard-framework.min.js"],"names":["window","undefined","angular","module","value","service","$q","$http","get","request","deferred","defer","success","data","resolve","error","reject","promise","directive","$rootScope","$log","$sce","dashboard","ngmTemplatePath","stringToBoolean","string","isDefined","toLowerCase","Boolean","replace","restrict","transclude","scope","structure","name","collapsible","editable","maximizable","ngmModel","ngmWidgetFilter","controller","$scope","model","widgetFilter","structureName","updateWidgets","params","$broadcast","$watch","oldVal","newVal","rows","structures","copy","title","titleTemplateUrl","editMode","editClass","link","$element","$attr","options","templateUrl","el","attr","setTimeout","$","find","each","i","d","search","closest","slideDown","bind","$event","toggleClass","hasClass","slideUp","ngmData","download","csv","then","document","createElement","href","encodeURIComponent","target","report","body","appendChild","click","remove","pdf","response","open","downloadUrl","setMetrics","template","type","icon","color","hover","metrics","tooltip","toUpperCase","$e","$timeout","priority","element","ngModel","trigger","is","$compile","dateFormat","token","timezone","timezoneClip","pad","val","len","String","length","date","mask","utc","dF","arguments","Object","prototype","toString","call","test","Date","isNaN","SyntaxError","masks","slice","_","D","m","y","H","M","s","L","o","getTimezoneOffset","flags","dd","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","Math","round","t","tt","T","TT","Z","match","pop","floor","abs","S","$0","default","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","format","this","require","container","formatSubmit","monthsFull","monthsShort","weekdaysFull","weekdaysLetter","firstDay","disable","today","clear","close","selectYears","onStart","onRender","onOpen","onClose","onSet","onStop","onSelection","ngReadonly","max","min","attrs","$modelValue","newValue","oldValue","equals","$formatters","unshift","modelValue","pickadateInput","pickadate","selectMonths","picker","set","getFullYear","getMonth","getDate","event","select","provider","widgets","widgetsPath","messageTemplate","loadingTemplate","widget","w","extend","reload","edit","path","$get","cid","id","columnTemplate","row","columns","isArray","cloned","append","rowTemplate","column","col","$templateCache","$controller","$injector","parseUrl","url","parsedUrl","indexOf","substring","getTemplate","tpl","getTrustedResourceUrl","put","compileWidget","currentScope","content","html","templateScope","$new","config","base","parent","resolvers","$tpl","forEach","key","isString","invoke","all","locals","templateCtrl","controllerAs","children","contents","reason","msg","warn","$destroy","$on","broadcast","merge","preLink","definition","wid","fromJson","widgetState","isCollapsed","debug","postLink","compile","pre","post","run"],"mappings":"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","file":"ngm-dashboard-framework.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('ngm', ['ngm.provider'])\n  .value('ngmTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<ngm-dashboard-row row=\"row\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<ngm-dashboard-column column=\"column\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('ngmVersion', '<<ngmVersion>>');\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name ngm.directive:ngmDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `ngmDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} ngmModel model object of the dashboard.\n * @param {function=} ngmWidgetFilter function to filter widgets on the add dialog.\n */\n\nangular.module('ngm')\n\t.service('ngmData', ['$q', '$http', function($q, $http){\n\t\treturn {\n\t\t\tget: function(request){\n\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t$http(request)\n\t\t\t\t\t.success(function(data){\n\t\t\t\t\t\tdeferred.resolve(data);\n\t\t\t\t\t})\n\t\t\t\t\t.error(function(){\n\t\t\t\t\t\tdeferred.reject();\n\t\t\t\t\t});\n\n\t\t\t\treturn deferred.promise;\n\t\t\t}\n\t\t};\n\t}])\n\t.directive('ngmDashboard', ['$rootScope', '$log', '$sce', 'dashboard', 'ngmTemplatePath', function ($rootScope, $log, $sce, dashboard, ngmTemplatePath) {\n\t\t'use strict';\n\n\t\tfunction stringToBoolean(string){\n\t\t\tswitch(angular.isDefined(string) ? string.toLowerCase() : null){\n\t\t\t\tcase 'true': case 'yes': case '1': return true;\n\t\t\t\tcase 'false': case 'no': case '0': case null: return false;\n\t\t\t\tdefault: return Boolean(string);\n\t\t\t}\n\t\t}\n\n\t\tfunction copyWidgets(source, target) {\n\t\t\tif ( source.widgets && source.widgets.length > 0 ){\n\t\t\t\tvar w = source.widgets.shift();\n\t\t\t\twhile (w){\n\t\t\t\t\ttarget.widgets.push(w);\n\t\t\t\t\tw = source.widgets.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Copy widget from old columns to the new model\n\t\t* @param object root the model\n\t\t* @param array of columns\n\t\t* @param counter\n\t\t*/\n\t\tfunction fillStructure(root, columns, counter) {\n\t\t\tcounter = counter || 0;\n\n\t\t\tif (angular.isDefined(root.rows)) {\n\t\t\t\tangular.forEach(root.rows, function (row) {\n\t\t\t\t\tangular.forEach(row.columns, function (column) {\n\t\t\t\t\t\t// if the widgets prop doesn't exist, create a new array for it.\n\t\t\t\t\t\t// this allows ui.sortable to do it's thing without error\n\t\t\t\t\t\tif (!column.widgets) {\n\t\t\t\t\t\t\tcolumn.widgets = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if a column exist at the counter index, copy over the column\n\t\t\t\t\t\tif (angular.isDefined(columns[counter])) {\n\t\t\t\t\t\t\t// do not add widgets to a column, which uses nested rows\n\t\t\t\t\t\t\tif (!angular.isDefined(column.rows)){\n\t\t\t\t\t\t\t\tcopyWidgets(columns[counter], column);\n\t\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// run fillStructure again for any sub rows/columns\n\t\t\t\t\t\tcounter = fillStructure(column, columns, counter);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t\t/**\n\t\t* Read Columns: recursively searches an object for the 'columns' property\n\t\t* @param object model\n\t\t* @param array  an array of existing columns; used when recursion happens\n\t\t*/\n\t\tfunction readColumns(root, columns) {\n\t\t\tcolumns = columns || [];\n\n\t\t\tif (angular.isDefined(root.rows)) {\n\t\t\t\tangular.forEach(root.rows, function (row) {\n\t\t\t\t\tangular.forEach(row.columns, function (col) {\n\t\t\t\t\t\tcolumns.push(col);\n\t\t\t\t\t\t// keep reading columns until we can't any more\n\t\t\t\t\t\treadColumns(col, columns);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn columns;\n\t\t}\n\n\t\tfunction changeStructure(model, structure){\n\t\t\tvar columns = readColumns(model);\n\t\t\tvar counter = 0;\n\n\t\t\tmodel.rows = angular.copy(structure.rows);\n\n\t\t\twhile ( counter < columns.length ){\n\t\t\t\tcounter = fillStructure(model, columns, counter);\n\t\t\t}\n\t\t}\n\n\t\tfunction createConfiguration(type){\n\t\t\tvar cfg = {};\n\t\t\tvar config = dashboard.widgets[type].config;\n\t\t\tif (config){\n\t\t\t\tcfg = angular.copy(config);\n\t\t\t}\n\t\t\treturn cfg;\n\t\t}\n\n\t\t/**\n\t\t * Find first widget column in model.\n\t\t *\n\t\t * @param dashboard model\n\t\t */\n\t\tfunction findFirstWidgetColumn(model){\n\t\t\tvar column = null;\n\t\t\tif (!angular.isArray(model.rows)){\n\t\t\t\t$log.error('model does not have any rows');\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tfor (var i=0; i<model.rows.length; i++){\n\t\t\t\tvar row = model.rows[i];\n\t\t\t\tif (angular.isArray(row.columns)){\n\t\t\t\t\tfor (var j=0; j<row.columns.length; j++){\n\t\t\t\t\t\tvar col = row.columns[j];\n\t\t\t\t\t\tif (!col.rows){\n\t\t\t\t\t\t\tcolumn = col;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (column){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn column;\n\t\t}\n\n\t\treturn {\n\t\t\treplace: true,\n\t\t\trestrict: 'EA',\n\t\t\ttransclude : false,\n\t\t\tscope: {\n\t\t\t\tstructure: '@',\n\t\t\t\tname: '@',\n\t\t\t\tcollapsible: '@',\n\t\t\t\teditable: '@',\n\t\t\t\tmaximizable: '@',\n\t\t\t\tngmModel: '=',\n\t\t\t\tngmWidgetFilter: '='\n\t\t\t},\n\t\t\tcontroller: function($scope){\n\t\t\t\tvar model = {};\n\t\t\t\tvar structure = {};\n\t\t\t\tvar widgetFilter = null;\n\t\t\t\tvar structureName = {};\n\t\t\t\tvar name = $scope.name;\n\n\t\t\t\t// Update widget configs with broadcast\n\t\t\t\t$scope.ngmModel.updateWidgets = function(params){\n\t\t\t\t\t$scope.$broadcast( 'widgetConfigChanged', params );\n\t\t\t\t}        \n\n\t\t\t\t// Watching for changes on ngmModel\n\t\t\t\t$scope.$watch('ngmModel', function(oldVal, newVal) {\n\t\t\t\t\t// has model changed or is the model attribute not set\n\t\t\t\t\tif (newVal !== null || (oldVal === null && newVal === null)) {\n\t\t\t\t\t\tmodel = $scope.ngmModel;\n\t\t\t\t\t\twidgetFilter = $scope.ngmWidgetFilter;\n\t\t\t\t\t\tif ( ! model || ! model.rows ){\n\t\t\t\t\t\t\tstructureName = $scope.structure;\n\t\t\t\t\t\t\tstructure = dashboard.structures[structureName];\n\t\t\t\t\t\t\tif (structure){\n\t\t\t\t\t\t\t\tif (model){\n\t\t\t\t\t\t\t\t\tmodel.rows = angular.copy(structure).rows;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tmodel = angular.copy(structure);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmodel.structure = structureName;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$log.error( 'could not find structure ' + structureName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (model) {\n\t\t\t\t\t\t\tif (!model.title){\n\t\t\t\t\t\t\t\tmodel.title = 'Dashboard';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!model.titleTemplateUrl) {\n\t\t\t\t\t\t\t\tmodel.titleTemplateUrl = ngmTemplatePath + 'dashboard-title.html';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$scope.model = model;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$log.error('could not find or create model');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, true);\n\n\t\t\t\t// edit mode\n\t\t\t\t$scope.editMode = false;\n\t\t\t\t$scope.editClass = '';\n\n\t\t\t},\n\t\t\tlink: function ($scope, $element, $attr) {\n\t\t\t\t// pass options to scope\n\t\t\t\tvar options = {\n\t\t\t\t\tname: $attr.name,\n\t\t\t\t\teditable: true,\n\t\t\t\t\tmaximizable: stringToBoolean($attr.maximizable),\n\t\t\t\t\tcollapsible: stringToBoolean($attr.collapsible)\n\t\t\t\t};\n\t\t\t\tif (angular.isDefined($attr.editable)){\n\t\t\t\t\toptions.editable = stringToBoolean($attr.editable);\n\t\t\t\t}\n\t\t\t\t$scope.options = options;\n\t\t\t},\n\t\t\ttemplateUrl: ngmTemplatePath + 'dashboard.html'\n\t\t};\n\t}])\n\t// toggles accordian classes for \n\t.directive('ngmMenu', function() {\n\n\t\treturn {\n\t\t\t\n\t\t\t// Restrict it to be an attribute in this case\n\t\t\trestrict: 'A',\n\t\t\t\n\t\t\t// responsible for registering DOM listeners as well as updating the DOM\n\t\t\tlink: function(scope, el, attr) {\n\n\t\t\t\t// set initial menu style - has to be a better way?\n\t\t\t\tsetTimeout(function(){\n\n\t\t\t\t\t// For all itmes\n\t\t\t\t\t$('.side-menu').find('li').each(function(i, d) {\n\n\t\t\t\t\t\t// find the row that is active\n\t\t\t\t\t\tif ($(d).attr('class').search('active') > 0) {\n\n\t\t\t\t\t\t\t// set list header\n\t\t\t\t\t\t\t$(d).closest('.bold').attr('class', 'bold active');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// set z-depth-1\n\t\t\t\t\t\t\t$(d).closest('.bold').find('a').attr('class', \n\t\t\t\t\t\t\t\t\t$(d).closest('.bold').find('a').attr('class') + ' z-depth-1' );\n\n\t\t\t\t\t\t\t// slide down list\n\t\t\t\t\t\t\t$(d).closest('.collapsible-body').slideDown();\n\t\t\t\t\t\t\t$(d).closest('.collapsible-body').attr('class',\n\t\t\t\t\t\t\t\t$(d).closest('.collapsible-body').attr('class') + ' active');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t}, 0);\n\n\t\t\t\t// on element click\n\t\t\t\tel.bind( 'click', function( $event ) {\n\t\t\t\t\t\n\t\t\t\t\t// toggle list \n\t\t\t\t\tel.toggleClass('active');\n\t\t\t\t\t// toggle list \n\t\t\t\t\tel.find('.collapsible-header').toggleClass('z-depth-1');\n\n\t\t\t\t\t// toggle list rows active\n\t\t\t\t\tel.find('.collapsible-body').toggleClass('active');\n\n\t\t\t\t\t// toggle list rows animation\n\t\t\t\t\tif (el.find('.collapsible-body').hasClass('active')) {\n\t\t\t\t\t\tel.find('.collapsible-body').slideDown();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tel.find('.collapsible-body').slideUp();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t})\n\t.directive('ngmDashboardDownload', ['dashboard', 'ngmData',  function(dashboard, ngmData) {\n\n\t\t// client side download    \n\t\tvar download = {\n\t\n\t\t\t// prepare and stream CSV to client      \n\t\t\t'csv': function(request){\n\t\t\t\t// get data\n\t\t\t\tngmData.get(request)\n\t\t\t\t\t// .then(function(data){\n\t\t\t\t\t.then(function(csv){\n\t\t\t\t\t\tvar csvHeader;\n\t\t\t\t\t\tvar type = 'data:text/csv;charset=utf-8';\n\n\t\t\t\t\t\tvar el = document.createElement('a');\n\t\t\t\t\t\t\tel.href = 'data:attachment/csv,' + encodeURIComponent(csv.data);\n\t\t\t\t\t\t\tel.target = '_blank';\n\t\t\t\t\t\t\tel.download = request.data.report + '.csv';\n\n\t\t\t\t\t\t// append, download & remove\n\t\t\t\t\t\tdocument.body.appendChild(el);\n\t\t\t\t\t\tel.click();\n\t\t\t\t\t\tel.remove();\n\n\t\t\t\t\t});\t\t\t\n\t\t\t},\n\n\t\t\t// client side PDF generation\n\t\t\t'pdf': function(request){\n\t\t\t\t// get data\n\t\t\t\tngmData.get(request)\n\t\t\t\t\t// .then(function(data){\n\t\t\t\t\t.then(function(response){\n\t\t\t\t\t\t// open in new tab\n\t\t\t\t\t\twindow.open(request.data.downloadUrl + response.report, '_blank');\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\t// writes metrics to rest api\n\t\t\t'setMetrics': function(request){\n\t\t\t\tngmData.get(request)\n\t\t\t\t\t.then(function(data){\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\t\n\t\t\t// element or attrbute\n\t\t\trestrict: 'EA',\n\n\t\t\treplace: true,\n\n\t\t\ttemplate: '<li><a class=\"btn-floating {{ color }} tooltipped\" data-position=\"bottom\" data-delay=\"50\" data-tooltip=\"{{ hover }}\"><i class=\"material-icons\">{{ icon }}</i></a></li>',\n\n\t\t\tscope: {\n\t\t\t\ttype: '=',\n\t\t\t\ticon: '=',\n\t\t\t\tcolor: '=',\n\t\t\t\thover: '=',\n\t\t\t\trequest: '=',\n\t\t\t\tmetrics: '='\n\t\t\t},\n\n\t\t\t// onclick\n\t\t\tlink: function(scope, el, attr) {\n\n\t\t\t\t// init tooltip\n\t\t\t\t$('.tooltipped').tooltip({\n\t\t\t\t\ttooltip: 'Download CSV'\n\t\t\t\t});\n\n\t\t\t\t// set defaults\n\t\t\t\tscope.type = scope.type ? scope.type : 'csv';\n\t\t\t\tscope.icon = scope.icon ? scope.icon : 'cloud_download';\n\t\t\t\tscope.color = scope.color ? scope.color : 'blue';\n\t\t\t\tscope.hover = scope.hover ? scope.hover : 'Download ' + scope.type.toUpperCase();\n\t\t\t\t\n\t\t\t\t// bind download event\n\t\t\t\tel.bind( 'click', function($e) {\n\n\t\t\t\t\t// prepare download\n\t\t\t\t\tdownload[scope.type](scope.request);\n\n\t\t\t\t\t// record metrics\n\t\t\t\t\tif (scope.metrics) {\n\t\t\t\t\t\tdownload.setMetrics(scope.metrics);\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t}\n\t\t}\n\t}])\n\t.directive(\"ngModel\", [\"$timeout\", function($timeout){\n\t\treturn {\n\t\t\trestrict: 'A',\n\t\t\tpriority: -1, // lower priority than built-in ng-model so it runs first\n\t\t\tlink: function(scope, element, attr) {\n\t\t\t\tscope.$watch(attr.ngModel,function(value){\n\t\t\t\t\t$timeout(function () {\n\t\t\t\t\t\tif (value){\n\t\t\t\t\t\t\t\telement.trigger(\"change\");\n\t\t\t\t\t\t} else if(element.attr('placeholder') === undefined) {\n\t\t\t\t\t\t\tif(!element.is(\":focus\")) {\n\t\t\t\t\t\t\t\telement.trigger(\"blur\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}])\n\t/**\n\t * Add pickadate directive\n\t * Type text is mandatory\n\t * Example:\n\t <input input-date\n\t\t\ttype=\"text\"\n\t\t\tname=\"created\"\n\t\t\tid=\"inputCreated\"\n\t\t\tng-model=\"currentTime\"\n\t\t\tformat=\"dd/mm/yyyy\"\n\t\t\tmonths-full=\"{{ monthFr }}\"\n\t\t\tmonths-short=\"{{ monthShortFr }}\"\n\t\t\tweekdays-full=\"{{ weekdaysFullFr }}\"\n\t\t\tweekdays-short=\"{{ weekdaysShortFr }}\"\n\t\t\tweekdays-letter=\"{{ weekdaysLetterFr }}\"\n\t\t\tdisable=\"disable\"\n\t\t\ttoday=\"today\"\n\t\t\tclear=\"clear\"\n\t\t\tclose=\"close\"\n\t\t\ton-start=\"onStart()\"\n\t\t\ton-render=\"onRender()\"\n\t\t\ton-open=\"onOpen()\"\n\t\t\ton-close=\"onClose()\"\n\t\t\ton-set=\"onSet()\"\n\t\t\ton-stop=\"onStop()\" />\n\t */\n\t // source\n\t // https://github.com/krescruz/angular-materialize/\n\t.directive('ngmDate', [\"$compile\", \"$timeout\", function ($compile, $timeout) {\n\n\t\t// Define Prototype Date format\n\t\t// Use like this\n\t\t// today = new Date();\n\t\t// var dateString = today.format(\"dd-m-yy\");\n\t\tvar dateFormat = function () {\n\n\t\t\t\tvar token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n\t\t\t\t\t\ttimezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n\t\t\t\t\t\ttimezoneClip = /[^-+\\dA-Z]/g,\n\t\t\t\t\t\tpad = function (val, len) {\n\t\t\t\t\t\t\t\tval = String(val);\n\t\t\t\t\t\t\t\tlen = len || 2;\n\t\t\t\t\t\t\t\twhile (val.length < len) {\n\t\t\t\t\t\t\t\t\t\tval = \"0\" + val;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\t};\n\n\t\t\t\t// Regexes and supporting functions are cached through closure\n\t\t\t\treturn function (date, mask, utc) {\n\n\t\t\t\t\t\tvar dF = dateFormat;\n\n\t\t\t\t\t\t// You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n\t\t\t\t\t\tif (arguments.length === 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\n\t\t\t\t\t\t\t\tmask = date;\n\t\t\t\t\t\t\t\tdate = undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Passing date through Date applies Date.parse, if necessary\n\t\t\t\t\t\tdate = date ? new Date(date) : new Date();\n\t\t\t\t\t\tif (isNaN(date)) throw SyntaxError(\"invalid date\");\n\n\t\t\t\t\t\tmask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\n\n\t\t\t\t\t\t// Allow setting the utc argument via the mask\n\t\t\t\t\t\tif (mask.slice(0, 4) == \"UTC:\") {\n\t\t\t\t\t\t\t\tmask = mask.slice(4);\n\t\t\t\t\t\t\t\tutc = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar _ = utc ? \"getUTC\" : \"get\",\n\t\t\t\t\t\t\t\td = date[ _ + \"Date\" ](),\n\t\t\t\t\t\t\t\tD = date[ _ + \"Day\" ](),\n\t\t\t\t\t\t\t\tm = date[ _ + \"Month\" ](),\n\t\t\t\t\t\t\t\ty = date[ _ + \"FullYear\" ](),\n\t\t\t\t\t\t\t\tH = date[ _ + \"Hours\" ](),\n\t\t\t\t\t\t\t\tM = date[ _ + \"Minutes\" ](),\n\t\t\t\t\t\t\t\ts = date[ _ + \"Seconds\" ](),\n\t\t\t\t\t\t\t\tL = date[ _ + \"Milliseconds\" ](),\n\t\t\t\t\t\t\t\to = utc ? 0 : date.getTimezoneOffset(),\n\t\t\t\t\t\t\t\tflags = {\n\t\t\t\t\t\t\t\t\t\td:    d,\n\t\t\t\t\t\t\t\t\t\tdd:   pad(d),\n\t\t\t\t\t\t\t\t\t\tddd:  dF.i18n.dayNames[D],\n\t\t\t\t\t\t\t\t\t\tdddd: dF.i18n.dayNames[D + 7],\n\t\t\t\t\t\t\t\t\t\tm:    m + 1,\n\t\t\t\t\t\t\t\t\t\tmm:   pad(m + 1),\n\t\t\t\t\t\t\t\t\t\tmmm:  dF.i18n.monthNames[m],\n\t\t\t\t\t\t\t\t\t\tmmmm: dF.i18n.monthNames[m + 12],\n\t\t\t\t\t\t\t\t\t\tyy:   String(y).slice(2),\n\t\t\t\t\t\t\t\t\t\tyyyy: y,\n\t\t\t\t\t\t\t\t\t\th:    H % 12 || 12,\n\t\t\t\t\t\t\t\t\t\thh:   pad(H % 12 || 12),\n\t\t\t\t\t\t\t\t\t\tH:    H,\n\t\t\t\t\t\t\t\t\t\tHH:   pad(H),\n\t\t\t\t\t\t\t\t\t\tM:    M,\n\t\t\t\t\t\t\t\t\t\tMM:   pad(M),\n\t\t\t\t\t\t\t\t\t\ts:    s,\n\t\t\t\t\t\t\t\t\t\tss:   pad(s),\n\t\t\t\t\t\t\t\t\t\tl:    pad(L, 3),\n\t\t\t\t\t\t\t\t\t\tL:    pad(L > 99 ? Math.round(L / 10) : L),\n\t\t\t\t\t\t\t\t\t\tt:    H < 12 ? \"a\"  : \"p\",\n\t\t\t\t\t\t\t\t\t\ttt:   H < 12 ? \"am\" : \"pm\",\n\t\t\t\t\t\t\t\t\t\tT:    H < 12 ? \"A\"  : \"P\",\n\t\t\t\t\t\t\t\t\t\tTT:   H < 12 ? \"AM\" : \"PM\",\n\t\t\t\t\t\t\t\t\t\tZ:    utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\n\t\t\t\t\t\t\t\t\t\to:    (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n\t\t\t\t\t\t\t\t\t\tS:    [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\treturn mask.replace(token, function ($0) {\n\t\t\t\t\t\t\t\treturn $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n\t\t\t\t\t\t});\n\t\t\t\t};\n\t\t}();\n\n\t\t// Some common format strings\n\t\tdateFormat.masks = {\n\t\t\t \"default\":      \"ddd mmm dd yyyy HH:MM:ss\",\n\t\t\t\tshortDate:      \"m/d/yy\",\n\t\t\t\tmediumDate:     \"mmm d, yyyy\",\n\t\t\t\tlongDate:       \"mmmm d, yyyy\",\n\t\t\t\tfullDate:       \"dddd, mmmm d, yyyy\",\n\t\t\t\tshortTime:      \"h:MM TT\",\n\t\t\t\tmediumTime:     \"h:MM:ss TT\",\n\t\t\t\tlongTime:       \"h:MM:ss TT Z\",\n\t\t\t\tisoDate:        \"yyyy-mm-dd\",\n\t\t\t\tisoTime:        \"HH:MM:ss\",\n\t\t\t\tisoDateTime:    \"yyyy-mm-dd'T'HH:MM:ss\",\n\t\t\t\tisoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\n\t\t};\n\n\t\t// Internationalization strings\n\t\tdateFormat.i18n = {\n\t\t\t\tdayNames: [\n\t\t\t\t\t\t\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\n\t\t\t\t\t\t\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n\t\t\t\t],\n\t\t\t\tmonthNames: [\n\t\t\t\t\t\t\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n\t\t\t\t\t\t\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n\t\t\t\t]\n\t\t};\n\n\t\t// For convenience...\n\t\tDate.prototype.format = function (mask, utc) {\n\t\t\t\treturn dateFormat(this, mask, utc);\n\t\t};\n\n\t\t/**\n\t\t * Validate date object\n\t\t * @param  {Date}  date\n\t\t * @return {Boolean}\n\t\t */\n\t\tvar isValidDate = function(date) {\n\t\t\t\tif( Object.prototype.toString.call(date) === '[object Date]' ) {\n\t\t\t\t\t\treturn !isNaN(date.getTime());\n\t\t\t\t} \n\t\t\t\treturn false;\n\t\t};    \n\n\t\treturn {\n\t\t\trequire: 'ngModel',\n\t\t\tscope: {\n\t\t\t\t\tcontainer: \"@\",\n\t\t\t\t\tformat: \"@\",\n\t\t\t\t\tformatSubmit: \"@\",\n\t\t\t\t\tmonthsFull: \"@\",\n\t\t\t\t\tmonthsShort: \"@\",\n\t\t\t\t\tweekdaysFull: \"@\",\n\t\t\t\t\tweekdaysLetter: \"@\",\n\t\t\t\t\tfirstDay: \"=\",\n\t\t\t\t\tdisable: \"=\",\n\t\t\t\t\ttoday: \"=\",\n\t\t\t\t\tclear: \"=\",\n\t\t\t\t\tclose: \"=\",\n\t\t\t\t\tselectYears: \"=\",\n\t\t\t\t\tonStart: \"&\",\n\t\t\t\t\tonRender: \"&\",\n\t\t\t\t\tonOpen: \"&\",\n\t\t\t\t\tonClose: \"&\",\n\t\t\t\t\tonSet: \"&\",\n\t\t\t\t\tonStop: \"&\",\n\t\t\t\t\tonSelection: \"&\",\n\t\t\t\t\tngReadonly: \"=?\",\n\t\t\t\t\tmax: \"@\",\n\t\t\t\t\tmin: \"@\"\n\t\t\t},\n\t\t\tlink: function ($scope, element, attrs, ngModel) {\n\n\t\t\t\t// watch changes\n\t\t\t\t$scope.$watch(function () {\n\t\t\t\t\treturn ngModel.$modelValue;\n\t\t\t\t}, function(newValue, oldValue) {\n\t\t\t\t\tif(angular.equals(newValue, oldValue)){\n\t\t\t\t\t\treturn; // simply skip that\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(angular.isDefined($scope.onSelection)){\n\t\t\t\t\t\t\t$scope.onSelection();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tngModel.$formatters.unshift(function (modelValue) {\n\t\t\t\t\tif (modelValue) {\n\t\t\t\t\t\tvar date = new Date(modelValue);\n\t\t\t\t\t\treturn (angular.isDefined($scope.format)) ? date.format($scope.format) : date.format('d mmmm, yyyy');\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\n\t\t\t\tvar pickadateInput = element.pickadate({\n\t\t\t\t\tselectMonths: true, // Creates a dropdown to control month\n\t\t\t\t\tselectYears: 15, // Creates a dropdown of 15 years to control year\n\t\t\t\t\tformat: (angular.isDefined($scope.format)) ? $scope.format : undefined,\n\t\t\t\t\tmin: (angular.isDefined($scope.min)) ? $scope.min : undefined,\n\t\t\t\t\tmax: (angular.isDefined($scope.max)) ? $scope.max : undefined,\n\t\t\t\t\tonStart: function(){\n\t\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t\t// set time\n\t\t\t\t\t\t\tvar date = ngModel.$modelValue;\n\t\t\t\t\t\t\tpicker.set('select', [new Date(date).getFullYear(), new Date(date).getMonth(), new Date(date).getDate()])\n\t\t\t\t\t\t}, 0)\n\t\t\t\t\t},\n\t\t\t\t\tonRender: function(){\n\t\t\t\t\t\t//\n\t\t\t\t\t},          \n\t\t\t\t\tonSet: function(event){\n\t\t\t\t\t\t// close on date select\n\t\t\t\t\t\tif(event.select){\n\t\t\t\t\t\t\tpicker.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t//pickadate API\n\t\t\t\tvar picker = pickadateInput.pickadate('picker');\n\n\t\t\t}\n\t\t};\n\t}]);\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name ngm.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('ngm.provider', [])\n\t.provider('dashboard', function(){\n\n\t\tvar widgets = {};\n\t\tvar widgetsPath = '';\n\t\tvar structures = {};\n\t\tvar messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n\t\tvar loadingTemplate = '\\\n\t\t\t<div class=\"progress progress-striped active\">\\n\\\n\t\t\t\t<div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n\t\t\t\t\t<span class=\"sr-only\">loading ...</span>\\n\\\n\t\t\t\t</div>\\n\\\n\t\t\t</div>';\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#widget\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Registers a new widget.\n\t\t*\n\t\t* @param {string} name of the widget\n\t\t* @param {object} widget to be registered.\n\t\t*\n\t\t*   Object properties:\n\t\t*\n\t\t*   - `title` - `{string=}` - The title of the widget.\n\t\t*   - `description` - `{string=}` - Description of the widget.\n\t\t*   - `config` - `{object}` - Predefined widget configuration.\n\t\t*   - `controller` - `{string=|function()=}` - Controller fn that should be\n\t\t*      associated with newly created scope of the widget or the name of a\n\t\t*      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n\t\t*      if passed as a string.\n\t\t*   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n\t\t*      published to scope under the `controllerAs` name.\n\t\t*   - `template` - `{string=|function()=}` - html template as a string.\n\t\t*   - `templateUrl` - `{string=}` - path to an html template.\n\t\t*   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n\t\t*   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n\t\t*      be injected into the controller. If any of these dependencies are promises, the widget\n\t\t*      will wait for them all to be resolved or one to be rejected before the controller is\n\t\t*      instantiated.\n\t\t*      If all the promises are resolved successfully, the values of the resolved promises are\n\t\t*      injected.\n\t\t*\n\t\t*      The map object is:\n\t\t*      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n\t\t*      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n\t\t*        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n\t\t*        and the return value is treated as the dependency. If the result is a promise, it is\n\t\t*        resolved before its value is injected into the controller.\n\t\t*   - `edit` - `{object}` - Edit modus of the widget.\n\t\t*      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n\t\t*        Default is true.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.widget = function(name, widget){\n\t\t\tvar w = angular.extend({reload: false}, widget);\n\t\t\tif ( w.edit ){\n\t\t\t\tvar edit = {reload: true};\n\t\t\t\tangular.extend(edit, w.edit);\n\t\t\t\tw.edit = edit;\n\t\t\t}\n\t\t\twidgets[name] = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name ngm.dashboardProvider#widgetsPath\n\t\t * @methodOf ngm.dashboardProvider\n\t\t * @description\n\t\t *\n\t\t * Sets the path to the directory which contains the widgets. The widgets\n\t\t * path is used for widgets with a templateUrl which contains the\n\t\t * placeholder {widgetsPath}. The placeholder is replaced with the\n\t\t * configured value, before the template is loaded, but the template is\n\t\t * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n\t\t * The default value of widgetPaths is ''.\n\t\t *\n\t\t *\n\t\t * @param {string} path to the directory which contains the widgets\n\t\t *\n\t\t * @returns {Object} self\n\t\t */\n\t\tthis.widgetsPath = function(path){\n\t\t\twidgetsPath = path;\n\t\t\treturn this;\n\t\t};\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#structure\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Registers a new structure.\n\t\t*\n\t\t* @param {string} name of the structure\n\t\t* @param {object} structure to be registered.\n\t\t*\n\t\t*   Object properties:\n\t\t*\n\t\t*   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n\t\t*     - `styleClass` - `{string}` - CSS Class of the row.\n\t\t*     - `columns` - `{Array.<Object>}` - Columns of the row.\n\t\t*       - `styleClass` - `{string}` - CSS Class of the column.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.structure = function(name, structure){\n\t\t\tstructures[name] = structure;\n\t\t\treturn this;\n\t\t};\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#messageTemplate\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Changes the template for messages.\n\t\t*\n\t\t* @param {string} template for messages.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.messageTemplate = function(template){\n\t\t\tmessageTemplate = template;\n\t\t\treturn this;\n\t\t};\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#loadingTemplate\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Changes the template which is displayed as\n\t\t* long as the widget resources are not resolved.\n\t\t*\n\t\t* @param {string} loading template\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.loadingTemplate = function(template){\n\t\t\tloadingTemplate = template;\n\t\t\treturn this;\n\t\t};\n\t\t\n\t /**\n\t\t* @ngdoc service\n\t\t* @name ngm.dashboard\n\t\t* @description\n\t\t*\n\t\t* The dashboard holds all options, structures and widgets.\n\t\t*\n\t\t* @property {Array.<Object>} widgets Array of registered widgets.\n\t\t* @property {string} widgetsPath Default path for widgets.\n\t\t* @property {Array.<Object>} structures Array of registered structures.\n\t\t* @property {string} messageTemplate Template for messages.\n\t\t* @property {string} loadingTemplate Template for widget loading.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.$get = function(){\n\t\t\tvar cid = 0;\n\n\t\t\treturn {\n\t\t\t\twidgets: widgets,\n\t\t\t\twidgetsPath: widgetsPath,\n\t\t\t\tstructures: structures,\n\t\t\t\tmessageTemplate: messageTemplate,\n\t\t\t\tloadingTemplate: loadingTemplate,\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc method\n\t\t\t\t * @name ngm.dashboard#id\n\t\t\t\t * @methodOf ngm.dashboard\n\t\t\t\t * @description\n\t\t\t\t *\n\t\t\t\t * Creates an ongoing numeric id. The method is used to create ids for\n\t\t\t\t * columns and widgets in the dashboard.\n\t\t\t\t */\n\t\t\t\tid: function(){\n\t\t\t\t\treturn ++cid;\n\t\t\t\t}\n\n\t\t\t};\n\t\t};\n});\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Patrick Fitzgerald\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('ngm')\n  .directive('ngmDashboardRow', function ($compile, ngmTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        ngmModel: '=',\n        editMode: '=',\n        options: '='\n      },\n      templateUrl: ngmTemplatePath + 'dashboard-row.html',\n      link: function ($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Patrick Fitzgerald\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('ngm')\n  .directive('ngmDashboardColumn', function ($log, $compile, ngmTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (w.wid === index){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if ( c.cid === index ){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the ngm id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('ngm-id');\n      return id ? parseInt(id) : -1;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        ngmModel: '=',\n        options: '='\n      },\n      templateUrl: ngmTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('ngm')\n  .directive('ngmWidgetContent', function($log, $q, $sce, $http, $templateCache,\n    $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url){\n      var parsedUrl = url;\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                       .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0){\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget){\n      var deferred = $q.defer();\n\n      if ( widget.template ){\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl){\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n            .success(function(response){\n              // put response to cache, with unmodified url as key\n              $templateCache.put(widget.templateUrl, response);\n              deferred.resolve(response);\n            })\n            .error(function(){\n              deferred.reject('could not load template');\n            });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        $element: $element.parent(),\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs){\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope){\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetReload', function(){\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetConfigChanged', function(event, params){\n          // match update to widget using 'broadcast'\n          if ($scope.model.broadcast === params.broadcast){\n            // Extend widget config with params\n            $scope.model.config = angular.merge({}, $scope.model.config, params.config);\n            // Re-compile widget\n            currentScope = compileWidget($scope, $element, currentScope);\n          }\n        });\n      }\n    };\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('ngm')\n  .directive('ngmWidget', function($log, dashboard, ngmTemplatePath) {\n\n    function preLink($scope){\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n\n          // set id for sortable\n          if (!definition.wid){\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n         if(!$scope.widgetState){\n             $scope.widgetState ={};\n             $scope.widgetState.isCollapsed= false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind reload function\n        $scope.reload = function(){\n          $scope.$broadcast('widgetReload');\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: ngmTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n\n      controller: function ($scope) {\n        // \n      },\n\n      compile: function compile(){\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n","angular.module(\"ngm\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div ngm-id={{column.cid}} class=col ng-class=column.styleClass ng-model=column.widgets> <ngm-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column options=options widget-state=widgetState>  </ngm-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\" <div class=\\\"{{ model.header.div.class }}\\\" style=\\\"{{ model.header.div.style }}\\\">  <div class=row>  <h2 id=ngm-report-title class=\\\"{{ model.header.title.class }}\\\" style=\\\"{{ model.header.title.style }}\\\" ng-bind-html=model.header.title.title> </h2>  <div id=ngm-report-download class=\\\"{{ model.header.download.class }}\\\" style=\\\"{{ model.header.download.style }}\\\" align=right ng-if=model.header.download> <div class=\\\"fixed-action-btn horizontal\\\" style=\\\"position: relative; display: inline-block; margin-top:66px;\\\"> <a class=\\\"btn-floating btn-large teal\\\"> <i class=\\\"large material-icons\\\">cloud_download</i> </a> <ul>  <div>  <ngm-dashboard-download ng-repeat=\\\"data in model.header.download.downloads track by $index\\\" type=data.type color=data.color icon=data.icon hover=data.hover filename=data.filename request=data.request metrics=data.metrics> </ngm-dashboard-download> </div> </ul> </div> </div> </div>  <div class=row>  <p id=ngm-report-subtitle class=\\\"{{ model.header.subtitle.class }}\\\" style=\\\"{{ model.header.subtitle.style }}\\\" ng-bind-html=model.header.subtitle.title> </p>  <div id=ngm-report-datepicker class=\\\"{{ model.header.datePicker.class }}\\\" style=\\\"{{ model.header.datePicker.style }}\\\"> <div ng-repeat=\\\"date in model.header.datePicker.dates track by $index\\\">  <div id=\\\"ngmDateContainer-{{ $index }}\\\" class=\\\"{{ date.class }}\\\" style=\\\"{{ date.style }}\\\"> <label for=\\\"ngmStartDate-{{ $index }}\\\">{{ date.label }}</label> <input ngm-date id=ngmStartDate type=text class=datepicker ng-model=date.time format=\\\"{{ date.format }}\\\" on-selection=date.onSelection()> </div> </div> </div> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard> <ngm-dashboard-row row=row ngm-model=model options=options ng-repeat=\\\"row in model.rows\\\"> </ngm-dashboard-row> </div> </div> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div ngm-id=\\\"{{ definition.wid }}\\\" ngm-widget-type=\\\"{{ definition.type }}\\\" class=\\\"widget {{ definition.card }}\\\" style=\\\"{{ definition.style }}\\\"> <ngm-widget-content model=definition content=widget> </ngm-widget-content></div> \");}]);","!function(e,t){\"use strict\";angular.module(\"ngm\",[\"ngm.provider\"]).value(\"ngmTemplatePath\",\"../src/templates/\").value(\"rowTemplate\",'<ngm-dashboard-row row=\"row\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />').value(\"columnTemplate\",'<ngm-dashboard-column column=\"column\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />').value(\"ngmVersion\",\"0.1.4\"),angular.module(\"ngm\").service(\"ngmData\",[\"$q\",\"$http\",function(e,t){return{get:function(n){var a=e.defer();return t(n).success(function(e){a.resolve(e)}).error(function(){a.reject()}),a.promise}}}]).directive(\"ngmDashboard\",[\"$rootScope\",\"$log\",\"$sce\",\"dashboard\",\"ngmTemplatePath\",function(e,t,n,a,o){function i(e){switch(angular.isDefined(e)?e.toLowerCase():null){case\"true\":case\"yes\":case\"1\":return!0;case\"false\":case\"no\":case\"0\":case null:return!1;default:return Boolean(e)}}return{replace:!0,restrict:\"EA\",transclude:!1,scope:{structure:\"@\",name:\"@\",collapsible:\"@\",editable:\"@\",maximizable:\"@\",ngmModel:\"=\",ngmWidgetFilter:\"=\"},controller:function(e){var n={},i={},l=null,r={};e.name;e.ngmModel.updateWidgets=function(t){e.$broadcast(\"widgetConfigChanged\",t)},e.$watch(\"ngmModel\",function(d,s){(null!==s||null===d&&null===s)&&(n=e.ngmModel,l=e.ngmWidgetFilter,n&&n.rows||(r=e.structure,i=a.structures[r],i?(n?n.rows=angular.copy(i).rows:n=angular.copy(i),n.structure=r):t.error(\"could not find structure \"+r)),n?(n.title||(n.title=\"Dashboard\"),n.titleTemplateUrl||(n.titleTemplateUrl=o+\"dashboard-title.html\"),e.model=n):t.error(\"could not find or create model\"))},!0),e.editMode=!1,e.editClass=\"\"},link:function(e,t,n){var a={name:n.name,editable:!0,maximizable:i(n.maximizable),collapsible:i(n.collapsible)};angular.isDefined(n.editable)&&(a.editable=i(n.editable)),e.options=a},templateUrl:o+\"dashboard.html\"}}]).directive(\"ngmMenu\",function(){return{restrict:\"A\",link:function(e,t,n){setTimeout(function(){$(\".side-menu\").find(\"li\").each(function(e,t){$(t).attr(\"class\").search(\"active\")>0&&($(t).closest(\".bold\").attr(\"class\",\"bold active\"),$(t).closest(\".bold\").find(\"a\").attr(\"class\",$(t).closest(\".bold\").find(\"a\").attr(\"class\")+\" z-depth-1\"),$(t).closest(\".collapsible-body\").slideDown(),$(t).closest(\".collapsible-body\").attr(\"class\",$(t).closest(\".collapsible-body\").attr(\"class\")+\" active\"))})},0),t.bind(\"click\",function(e){t.toggleClass(\"active\"),t.find(\".collapsible-header\").toggleClass(\"z-depth-1\"),t.find(\".collapsible-body\").toggleClass(\"active\"),t.find(\".collapsible-body\").hasClass(\"active\")?t.find(\".collapsible-body\").slideDown():t.find(\".collapsible-body\").slideUp()})}}}).directive(\"ngmDashboardDownload\",[\"dashboard\",\"ngmData\",function(t,n){var a={csv:function(e){n.get(e).then(function(t){var n=document.createElement(\"a\");n.href=\"data:attachment/csv,\"+encodeURIComponent(t.data),n.target=\"_blank\",n.download=e.data.report+\"extracted-\"+moment().format()+\".csv\",document.body.appendChild(n),n.click(),n.remove()})},pdf:function(t){n.get(t).then(function(n){e.open(t.data.downloadUrl+n.report,\"_blank\")})},setMetrics:function(e){n.get(e).then(function(e){})}};return{restrict:\"EA\",replace:!0,template:'<li><a class=\"btn-floating {{ color }} tooltipped\" data-position=\"bottom\" data-delay=\"50\" data-tooltip=\"{{ hover }}\"><i class=\"material-icons\">{{ icon }}</i></a></li>',scope:{type:\"=\",icon:\"=\",color:\"=\",hover:\"=\",request:\"=\",metrics:\"=\"},link:function(e,t,n){$(\".tooltipped\").tooltip({tooltip:\"Download CSV\"}),e.type=e.type?e.type:\"csv\",e.icon=e.icon?e.icon:\"cloud_download\",e.color=e.color?e.color:\"blue\",e.hover=e.hover?e.hover:\"Download \"+e.type.toUpperCase(),t.bind(\"click\",function(t){a[e.type](e.request),e.metrics&&a.setMetrics(e.metrics)})}}}]).directive(\"ngModel\",[\"$timeout\",function(e){return{restrict:\"A\",priority:-1,link:function(n,a,o){n.$watch(o.ngModel,function(n){e(function(){n?a.trigger(\"change\"):a.attr(\"placeholder\")===t&&(a.is(\":focus\")||a.trigger(\"blur\"))})})}}}]).directive(\"ngmDate\",[\"$compile\",\"$timeout\",function(e,n){var a=function(){var e=/d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,n=/\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,o=/[^-+\\dA-Z]/g,i=function(e,t){for(e=String(e),t=t||2;e.length<t;)e=\"0\"+e;return e};return function(l,r,d){var s=a;if(1!==arguments.length||\"[object String]\"!=Object.prototype.toString.call(l)||/\\d/.test(l)||(r=l,l=t),l=l?new Date(l):new Date,isNaN(l))throw SyntaxError(\"invalid date\");r=String(s.masks[r]||r||s.masks[\"default\"]),\"UTC:\"==r.slice(0,4)&&(r=r.slice(4),d=!0);var c=d?\"getUTC\":\"get\",m=l[c+\"Date\"](),u=l[c+\"Day\"](),g=l[c+\"Month\"](),p=l[c+\"FullYear\"](),f=l[c+\"Hours\"](),h=l[c+\"Minutes\"](),y=l[c+\"Seconds\"](),v=l[c+\"Milliseconds\"](),b=d?0:l.getTimezoneOffset(),w={d:m,dd:i(m),ddd:s.i18n.dayNames[u],dddd:s.i18n.dayNames[u+7],m:g+1,mm:i(g+1),mmm:s.i18n.monthNames[g],mmmm:s.i18n.monthNames[g+12],yy:String(p).slice(2),yyyy:p,h:f%12||12,hh:i(f%12||12),H:f,HH:i(f),M:h,MM:i(h),s:y,ss:i(y),l:i(v,3),L:i(v>99?Math.round(v/10):v),t:12>f?\"a\":\"p\",tt:12>f?\"am\":\"pm\",T:12>f?\"A\":\"P\",TT:12>f?\"AM\":\"PM\",Z:d?\"UTC\":(String(l).match(n)||[\"\"]).pop().replace(o,\"\"),o:(b>0?\"-\":\"+\")+i(100*Math.floor(Math.abs(b)/60)+Math.abs(b)%60,4),S:[\"th\",\"st\",\"nd\",\"rd\"][m%10>3?0:(m%100-m%10!=10)*m%10]};return r.replace(e,function(e){return e in w?w[e]:e.slice(1,e.length-1)})}}();a.masks={\"default\":\"ddd mmm dd yyyy HH:MM:ss\",shortDate:\"m/d/yy\",mediumDate:\"mmm d, yyyy\",longDate:\"mmmm d, yyyy\",fullDate:\"dddd, mmmm d, yyyy\",shortTime:\"h:MM TT\",mediumTime:\"h:MM:ss TT\",longTime:\"h:MM:ss TT Z\",isoDate:\"yyyy-mm-dd\",isoTime:\"HH:MM:ss\",isoDateTime:\"yyyy-mm-dd'T'HH:MM:ss\",isoUtcDateTime:\"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"},a.i18n={dayNames:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],monthNames:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]},Date.prototype.format=function(e,t){return a(this,e,t)};return{require:\"ngModel\",scope:{container:\"@\",format:\"@\",formatSubmit:\"@\",monthsFull:\"@\",monthsShort:\"@\",weekdaysFull:\"@\",weekdaysLetter:\"@\",firstDay:\"=\",disable:\"=\",today:\"=\",clear:\"=\",close:\"=\",selectYears:\"=\",onStart:\"&\",onRender:\"&\",onOpen:\"&\",onClose:\"&\",onSet:\"&\",onStop:\"&\",onSelection:\"&\",ngReadonly:\"=?\",max:\"@\",min:\"@\"},link:function(e,n,a,o){e.$watch(function(){return o.$modelValue},function(t,n){angular.equals(t,n)||angular.isDefined(e.onSelection)&&e.onSelection()}),o.$formatters.unshift(function(t){if(t){var n=new Date(t);return angular.isDefined(e.format)?n.format(e.format):n.format(\"d mmmm, yyyy\")}return null});var i=n.pickadate({selectMonths:!0,selectYears:15,format:angular.isDefined(e.format)?e.format:t,min:angular.isDefined(e.min)?e.min:t,max:angular.isDefined(e.max)?e.max:t,onStart:function(){setTimeout(function(){var e=o.$modelValue;l.set(\"select\",[new Date(e).getFullYear(),new Date(e).getMonth(),new Date(e).getDate()])},0)},onRender:function(){},onSet:function(e){e.select&&l.close()}}),l=i.pickadate(\"picker\")}}}]),angular.module(\"ngm.provider\",[]).provider(\"dashboard\",function(){var e={},t=\"\",n={},a='<div class=\"alert alert-danger\">{}</div>',o='\t\t\t<div class=\"progress progress-striped active\">\\n\t\t\t\t<div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\t\t\t\t\t<span class=\"sr-only\">loading ...</span>\\n\t\t\t\t</div>\\n\t\t\t</div>';this.widget=function(t,n){var a=angular.extend({reload:!1},n);if(a.edit){var o={reload:!0};angular.extend(o,a.edit),a.edit=o}return e[t]=a,this},this.widgetsPath=function(e){return t=e,this},this.structure=function(e,t){return n[e]=t,this},this.messageTemplate=function(e){return a=e,this},this.loadingTemplate=function(e){return o=e,this},this.$get=function(){var i=0;return{widgets:e,widgetsPath:t,structures:n,messageTemplate:a,loadingTemplate:o,id:function(){return++i}}}}),angular.module(\"ngm\").directive(\"ngmDashboardRow\",function(e,t,n){return{restrict:\"E\",replace:!0,scope:{row:\"=\",ngmModel:\"=\",editMode:\"=\",options:\"=\"},templateUrl:t+\"dashboard-row.html\",link:function(t,a){angular.isDefined(t.row.columns)&&angular.isArray(t.row.columns)&&e(n)(t,function(e){a.append(e)})}}}),angular.module(\"ngm\").directive(\"ngmDashboardColumn\",function(e,t,n,a,o){return{restrict:\"E\",replace:!0,scope:{column:\"=\",editMode:\"=\",ngmModel:\"=\",options:\"=\"},templateUrl:n+\"dashboard-column.html\",link:function(e,n){var i=e.column;i.cid||(i.cid=o.id()),t(a)(e,function(e){n.append(e)})}}}),angular.module(\"ngm\").directive(\"ngmWidgetContent\",function(e,t,n,a,o,i,l,r,d){function s(e){var t=e;return e.indexOf(\"{widgetsPath}\")>=0&&(t=e.replace(\"{widgetsPath}\",d.widgetsPath).replace(\"//\",\"/\"),0===t.indexOf(\"/\")&&(t=t.substring(1))),t}function c(e){var i=t.defer();if(e.template)i.resolve(e.template);else if(e.templateUrl){var l=o.get(e.templateUrl);if(l)i.resolve(l);else{var r=n.getTrustedResourceUrl(s(e.templateUrl));a.get(r).success(function(t){o.put(e.templateUrl,t),i.resolve(t)}).error(function(){i.reject(\"could not load template\")})}}return i.promise}function m(n,a,o){var s=n.model,m=n.content;a.html(d.loadingTemplate);var u=n.$new();s.config||(s.config={}),u.config=s.config;var g={$scope:u,$element:a.parent(),widget:s,config:s.config},p={};return p.$tpl=c(m),m.resolve&&angular.forEach(m.resolve,function(e,t){angular.isString(e)?p[t]=r.get(e):p[t]=r.invoke(e,e,g)}),t.all(p).then(function(e){angular.extend(e,g);var t=e.$tpl;if(a.html(t),m.controller){var n=l(m.controller,e);m.controllerAs&&(u[m.controllerAs]=n),a.children().data(\"$ngControllerController\",n)}i(a.contents())(u)},function(t){var n=\"Could not resolve all promises\";t&&(n+=\": \"+t),e.warn(n),a.html(d.messageTemplate.replace(/{}/g,n))}),o&&o.$destroy(),u}return{replace:!0,restrict:\"EA\",transclude:!1,scope:{model:\"=\",content:\"=\"},link:function(e,t){var n=m(e,t,null);e.$on(\"widgetReload\",function(){n=m(e,t,n)}),e.$on(\"widgetConfigChanged\",function(a,o){e.model.broadcast===o.broadcast&&(e.model.config=angular.merge({},e.model.config,o.config),n=m(e,t,n))})}}}),angular.module(\"ngm\").directive(\"ngmWidget\",function(e,t,n){function a(n){var a=n.definition;if(a){var o=t.widgets[a.type];if(o){a.wid||(a.wid=t.id()),n.widget=angular.copy(o);var i=a.config;i?angular.isString(i)&&(i=angular.fromJson(i)):i={},n.config=i,n.widgetState||(n.widgetState={},n.widgetState.isCollapsed=!1)}else e.warn(\"could not find widget \"+a.type)}else e.debug(\"definition not specified, widget was probably removed\")}function o(t,n){var a=t.definition;a?t.reload=function(){t.$broadcast(\"widgetReload\")}:e.debug(\"widget not found\")}return{replace:!0,restrict:\"EA\",transclude:!1,templateUrl:n+\"widget.html\",scope:{definition:\"=\",col:\"=column\",editMode:\"=\",options:\"=\",widgetState:\"=\"},controller:function(e){},compile:function(){return{pre:a,post:o}}}}),angular.module(\"ngm\").run([\"$templateCache\",function(e){e.put(\"../src/templates/dashboard-column.html\",'<div ngm-id={{column.cid}} class=col ng-class=column.styleClass ng-model=column.widgets> <ngm-widget ng-repeat=\"definition in column.widgets\" definition=definition column=column options=options widget-state=widgetState>  </ngm-widget></div> '),e.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \"),e.put(\"../src/templates/dashboard-title.html\",' <div class=\"{{ model.header.div.class }}\" style=\"{{ model.header.div.style }}\">  <div class=row>  <h2 id=ngm-report-title class=\"{{ model.header.title.class }}\" style=\"{{ model.header.title.style }}\" ng-bind-html=model.header.title.title> </h2>  <div id=ngm-report-download class=\"{{ model.header.download.class }}\" style=\"{{ model.header.download.style }}\" align=right ng-if=model.header.download> <div class=\"fixed-action-btn horizontal\" style=\"position: relative; display: inline-block; margin-top:66px;\"> <a class=\"btn-floating btn-large teal\"> <i class=\"large material-icons\">cloud_download</i> </a> <ul>  <div>  <ngm-dashboard-download ng-repeat=\"data in model.header.download.downloads track by $index\" type=data.type color=data.color icon=data.icon hover=data.hover filename=data.filename request=data.request metrics=data.metrics> </ngm-dashboard-download> </div> </ul> </div> </div> </div>  <div class=row>  <p id=ngm-report-subtitle class=\"{{ model.header.subtitle.class }}\" style=\"{{ model.header.subtitle.style }}\" ng-bind-html=model.header.subtitle.title> </p>  <div id=ngm-report-datepicker class=\"{{ model.header.datePicker.class }}\" style=\"{{ model.header.datePicker.style }}\"> <div ng-repeat=\"date in model.header.datePicker.dates track by $index\">  <div id=\"ngmDateContainer-{{ $index }}\" class=\"{{ date.class }}\" style=\"{{ date.style }}\"> <label for=\"ngmStartDate-{{ $index }}\">{{ date.label }}</label> <input ngm-date id=ngmStartDate type=text class=datepicker ng-model=date.time format=\"{{ date.format }}\" on-selection=date.onSelection()> </div> </div> </div> </div> </div> '),e.put(\"../src/templates/dashboard.html\",'<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard> <ngm-dashboard-row row=row ngm-model=model options=options ng-repeat=\"row in model.rows\"> </ngm-dashboard-row> </div> </div> '),e.put(\"../src/templates/widget.html\",'<div ngm-id=\"{{ definition.wid }}\" ngm-widget-type=\"{{ definition.type }}\" class=\"widget {{ definition.card }}\" style=\"{{ definition.style }}\"> <ngm-widget-content model=definition content=widget> </ngm-widget-content></div> ')}])}(window);\n//# sourceMappingURL=ngm-dashboard-framework.min.js.map"],"sourceRoot":"/source/"}