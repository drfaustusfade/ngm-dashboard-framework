{"version":3,"sources":["ngm.js","dashboard.js","provider.js","row.js","column.js","widget-content.js","widget.js","ngm-dashboard-framework.tpl.js","ngm-dashboard-framework.min.js"],"names":["window","undefined","angular","module","value","service","$q","$http","get","request","deferred","defer","success","data","resolve","error","reject","promise","directive","$rootScope","$log","dashboard","ngmTemplatePath","stringToBoolean","string","isDefined","toLowerCase","Boolean","replace","restrict","transclude","scope","structure","name","collapsible","editable","maximizable","ngmModel","ngmWidgetFilter","controller","$scope","model","widgetFilter","structureName","updateWidgets","params","$broadcast","$watch","oldVal","newVal","rows","structures","copy","title","titleTemplateUrl","editMode","editClass","link","$element","$attr","options","templateUrl","el","attr","setTimeout","$","find","each","i","d","search","closest","slideDown","bind","$event","toggleClass","hasClass","slideUp","ngmData","download","csv","filename","dataKey","then","csvHeader","map","row","record","forEach","key","push","csvRow","join","csvData","document","createElement","href","encodeURIComponent","target","body","appendChild","click","remove","pdf","console","log","setMetrics","template","icon","type","hover","metrics","tooltip","color","size","moment","format","$e","provider","widgets","widgetsPath","messageTemplate","loadingTemplate","this","widget","w","extend","reload","edit","path","$get","cid","id","$compile","columnTemplate","columns","isArray","cloned","append","rowTemplate","column","col","$sce","$templateCache","$controller","$injector","parseUrl","url","parsedUrl","indexOf","substring","getTemplate","tpl","getTrustedResourceUrl","response","put","compileWidget","currentScope","content","html","templateScope","$new","config","base","parent","resolvers","$tpl","isString","invoke","all","locals","templateCtrl","controllerAs","children","contents","reason","msg","warn","$destroy","$on","event","preLink","definition","wid","fromJson","widgetState","isCollapsed","debug","postLink","compile","pre","post","run"],"mappings":"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","file":"ngm-dashboard-framework.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('ngm', ['ngm.provider'])\n  .value('ngmTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<ngm-dashboard-row row=\"row\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<ngm-dashboard-column column=\"column\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('ngmVersion', '<<ngmVersion>>');\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name ngm.directive:ngmDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `ngmDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} ngmModel model object of the dashboard.\n * @param {function=} ngmWidgetFilter function to filter widgets on the add dialog.\n */\n\nangular.module('ngm')\n  .service('ngmData', function($q, $http){\n    return {\n      get: function(request){\n        var deferred = $q.defer();\n        $http(request)\n          .success(function(data){\n            deferred.resolve(data);\n          })\n          .error(function(){\n            deferred.reject();\n          });\n\n        return deferred.promise;\n      }\n    };\n  })\n  .directive('ngmDashboard', function ($rootScope, $log, dashboard, ngmTemplatePath) {\n    'use strict';\n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (!angular.isDefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        maximizable: '@',\n        ngmModel: '=',\n        ngmWidgetFilter: '='\n      },\n      controller: function($scope){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        // Update widget configs with broadcast\n        $scope.ngmModel.updateWidgets = function(params){\n          $scope.$broadcast( 'updateWidgetConfigs', params );\n        }        \n\n        // Watching for changes on ngmModel\n        $scope.$watch('ngmModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.ngmModel;\n            widgetFilter = $scope.ngmWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if (!model.title){\n                model.title = 'Dashboard';\n              }\n              if (!model.titleTemplateUrl) {\n                model.titleTemplateUrl = ngmTemplatePath + 'dashboard-title.html';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n      },\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible)\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: ngmTemplatePath + 'dashboard.html'\n    };\n  })\n  // toggles accordian classes for \n  .directive('ngmMenu', function() {\n\n    return {\n      \n      // Restrict it to be an attribute in this case\n      restrict: 'A',\n      \n      // responsible for registering DOM listeners as well as updating the DOM\n      link: function(scope, el, attr) {\n\n        // set initial menu style - has to be a better way?\n        setTimeout(function(){\n\n          // For all itmes\n          $('.side-menu').find('li').each(function(i, d) {\n\n            // find the row that is active\n            if ($(d).attr('class').search('active') > 0) {\n\n              // set list header\n              $(d).closest('.bold').attr('class', 'bold active');\n              \n              // set z-depth-1\n              $(d).closest('.bold').find('a').attr('class', \n                  $(d).closest('.bold').find('a').attr('class') + ' z-depth-1' );\n\n              // slide down list\n              $(d).closest('.collapsible-body').slideDown();\n              $(d).closest('.collapsible-body').attr('class',\n                $(d).closest('.collapsible-body').attr('class') + ' active');\n            }\n          });\n\n        }, 0);\n\n        // on element click\n        el.bind( 'click', function( $event ) {\n          \n          // toggle list \n          el.toggleClass('active');\n          // toggle list \n          el.find('.collapsible-header').toggleClass('z-depth-1');\n\n          // toggle list rows active\n          el.find('.collapsible-body').toggleClass('active');\n\n          // toggle list rows animation\n          if (el.find('.collapsible-body').hasClass('active')) {\n            el.find('.collapsible-body').slideDown();\n          } else {\n            el.find('.collapsible-body').slideUp();\n          }\n          \n        });\n      }\n    };\n  })\n  .directive('ngmDashboardDownload',  function(dashboard, ngmData) {\n\n    // client side download    \n    var download = {\n  \n      // prepare and stream CSV to client      \n      'csv': function(filename, request, dataKey){\n\n        // get data\n        ngmData.get(request)\n          .then(function(data){\n\n            // datatype\n            var csvHeader;\n            var type = 'data:text/csv;charset=utf-8';\n\n            // convert json to array\n            var rows = data[dataKey].map(function (row) {\n\n              // csv headers\n              csvHeader = [];\n              var record = [];\n\n              // access each value\n              angular.forEach(row, function(d, key){\n\n                // create flat array\n                csvHeader.push(key);\n                record.push(d);\n\n              });\n\n              // join as csv string\n              var csvRow = record.join()\n\n              // return\n              return csvRow\n\n            });\n\n            // compile csv data\n            var csvData = [];\n                csvData.push(csvHeader.join());\n                csvData.push(rows.join('\\n'));\n\n            // create element and add csv string\n            var el = document.createElement('a');\n                el.href = 'data:attachment/csv,' + encodeURIComponent(csvData);\n                el.target = '_blank';\n                el.download = filename + '.csv';\n\n            // append, download & remove\n            document.body.appendChild(el);\n            el.click();\n            el.remove();\n\n          });\n      },\n\n      // client side PDF generation\n      'pdf': function(filename, request, dataKey){\n        console.log('PDF');\n      },\n\n      // writes metrics to rest api\n      'setMetrics': function(request){\n        ngmData.get(request)\n          .then(function(data){\n          });\n      }\n\n    }\n\n    return {\n      \n      // element or attrbute\n      restrict: 'EA',\n\n      replace: true,\n\n      template: '<a class=\"tooltipped\" data-position=\"top\" data-delay=\"50\" data-tooltip=\"{{ hover }}\" style=\"color: {{ icon.color }}\"><i class=\"{{ icon.size }} material-icons\">{{ icon.type }}</i></a>',      \n\n      scope: {\n        icon: '=',\n        type: '=',\n        hover: '=',\n        dataKey: '=',\n        filename: '=',\n        request: '=',\n        metrics: '='\n      },\n\n      // onclick\n      link: function(scope, el, attr) {\n\n        // init tooltip\n        $('.tooltipped').tooltip({\n          tooltip: 'Download CSV'\n        });\n\n        // set defaults\n        scope.icon = {\n          type: scope.icon && scope.icon.type ? scope.icon.type : 'ic_assignment_returned',\n          color: scope.icon && scope.icon.color ? scope.icon.color : '',\n          size: scope.icon && scope.icon.size ? scope.icon.size : 'small'\n        }\n        scope.type = scope.type ? scope.type : 'csv';\n        scope.hover = scope.hover ? scope.hover : 'Download ' + scope.type;\n        scope.dataKey = scope.dataKey ? scope.dataKey : 'data';\n        scope.filename = scope.filename ? scope.filename : moment().format();        \n        \n        // bind download event\n        el.bind( 'click', function($e) {\n\n          // prepare download\n          download[scope.type](scope.filename, scope.request, scope.dataKey);\n\n          // record metrics\n          if (scope.metrics) {\n            download.setMetrics(scope.metrics);\n          }\n\n        });\n\n      }\n    }\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name ngm.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('ngm.provider', [])\n\t.provider('dashboard', function(){\n\n\t\tvar widgets = {};\n\t\tvar widgetsPath = '';\n\t\tvar structures = {};\n\t\tvar messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n\t\tvar loadingTemplate = '\\\n\t\t\t<div class=\"progress progress-striped active\">\\n\\\n\t\t\t\t<div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n\t\t\t\t\t<span class=\"sr-only\">loading ...</span>\\n\\\n\t\t\t\t</div>\\n\\\n\t\t\t</div>';\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#widget\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Registers a new widget.\n\t\t*\n\t\t* @param {string} name of the widget\n\t\t* @param {object} widget to be registered.\n\t\t*\n\t\t*   Object properties:\n\t\t*\n\t\t*   - `title` - `{string=}` - The title of the widget.\n\t\t*   - `description` - `{string=}` - Description of the widget.\n\t\t*   - `config` - `{object}` - Predefined widget configuration.\n\t\t*   - `controller` - `{string=|function()=}` - Controller fn that should be\n\t\t*      associated with newly created scope of the widget or the name of a\n\t\t*      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n\t\t*      if passed as a string.\n\t\t*   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n\t\t*      published to scope under the `controllerAs` name.\n\t\t*   - `template` - `{string=|function()=}` - html template as a string.\n\t\t*   - `templateUrl` - `{string=}` - path to an html template.\n\t\t*   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n\t\t*   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n\t\t*      be injected into the controller. If any of these dependencies are promises, the widget\n\t\t*      will wait for them all to be resolved or one to be rejected before the controller is\n\t\t*      instantiated.\n\t\t*      If all the promises are resolved successfully, the values of the resolved promises are\n\t\t*      injected.\n\t\t*\n\t\t*      The map object is:\n\t\t*      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n\t\t*      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n\t\t*        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n\t\t*        and the return value is treated as the dependency. If the result is a promise, it is\n\t\t*        resolved before its value is injected into the controller.\n\t\t*   - `edit` - `{object}` - Edit modus of the widget.\n\t\t*      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n\t\t*        Default is true.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.widget = function(name, widget){\n\t\t\tvar w = angular.extend({reload: false}, widget);\n\t\t\tif ( w.edit ){\n\t\t\t\tvar edit = {reload: true};\n\t\t\t\tangular.extend(edit, w.edit);\n\t\t\t\tw.edit = edit;\n\t\t\t}\n\t\t\twidgets[name] = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name ngm.dashboardProvider#widgetsPath\n\t\t * @methodOf ngm.dashboardProvider\n\t\t * @description\n\t\t *\n\t\t * Sets the path to the directory which contains the widgets. The widgets\n\t\t * path is used for widgets with a templateUrl which contains the\n\t\t * placeholder {widgetsPath}. The placeholder is replaced with the\n\t\t * configured value, before the template is loaded, but the template is\n\t\t * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n\t\t * The default value of widgetPaths is ''.\n\t\t *\n\t\t *\n\t\t * @param {string} path to the directory which contains the widgets\n\t\t *\n\t\t * @returns {Object} self\n\t\t */\n\t\tthis.widgetsPath = function(path){\n\t\t\twidgetsPath = path;\n\t\t\treturn this;\n\t\t};\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#structure\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Registers a new structure.\n\t\t*\n\t\t* @param {string} name of the structure\n\t\t* @param {object} structure to be registered.\n\t\t*\n\t\t*   Object properties:\n\t\t*\n\t\t*   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n\t\t*     - `styleClass` - `{string}` - CSS Class of the row.\n\t\t*     - `columns` - `{Array.<Object>}` - Columns of the row.\n\t\t*       - `styleClass` - `{string}` - CSS Class of the column.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.structure = function(name, structure){\n\t\t\tstructures[name] = structure;\n\t\t\treturn this;\n\t\t};\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#messageTemplate\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Changes the template for messages.\n\t\t*\n\t\t* @param {string} template for messages.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.messageTemplate = function(template){\n\t\t\tmessageTemplate = template;\n\t\t\treturn this;\n\t\t};\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#loadingTemplate\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Changes the template which is displayed as\n\t\t* long as the widget resources are not resolved.\n\t\t*\n\t\t* @param {string} loading template\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.loadingTemplate = function(template){\n\t\t\tloadingTemplate = template;\n\t\t\treturn this;\n\t\t};\n\t\t\n\t /**\n\t\t* @ngdoc service\n\t\t* @name ngm.dashboard\n\t\t* @description\n\t\t*\n\t\t* The dashboard holds all options, structures and widgets.\n\t\t*\n\t\t* @property {Array.<Object>} widgets Array of registered widgets.\n\t\t* @property {string} widgetsPath Default path for widgets.\n\t\t* @property {Array.<Object>} structures Array of registered structures.\n\t\t* @property {string} messageTemplate Template for messages.\n\t\t* @property {string} loadingTemplate Template for widget loading.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.$get = function(){\n\t\t\tvar cid = 0;\n\n\t\t\treturn {\n\t\t\t\twidgets: widgets,\n\t\t\t\twidgetsPath: widgetsPath,\n\t\t\t\tstructures: structures,\n\t\t\t\tmessageTemplate: messageTemplate,\n\t\t\t\tloadingTemplate: loadingTemplate,\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc method\n\t\t\t\t * @name ngm.dashboard#id\n\t\t\t\t * @methodOf ngm.dashboard\n\t\t\t\t * @description\n\t\t\t\t *\n\t\t\t\t * Creates an ongoing numeric id. The method is used to create ids for\n\t\t\t\t * columns and widgets in the dashboard.\n\t\t\t\t */\n\t\t\t\tid: function(){\n\t\t\t\t\treturn ++cid;\n\t\t\t\t}\n\n\t\t\t};\n\t\t};\n});\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Patrick Fitzgerald\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('ngm')\n  .directive('ngmDashboardRow', function ($compile, ngmTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        ngmModel: '=',\n        editMode: '=',\n        options: '='\n      },\n      templateUrl: ngmTemplatePath + 'dashboard-row.html',\n      link: function ($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Patrick Fitzgerald\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('ngm')\n  .directive('ngmDashboardColumn', function ($log, $compile, ngmTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (w.wid === index){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if ( c.cid === index ){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the ngm id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('ngm-id');\n      return id ? parseInt(id) : -1;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        ngmModel: '=',\n        options: '='\n      },\n      templateUrl: ngmTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('ngm')\n  .directive('ngmWidgetContent', function($log, $q, $sce, $http, $templateCache,\n    $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url){\n      var parsedUrl = url;\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                       .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0){\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget){\n      var deferred = $q.defer();\n\n      if ( widget.template ){\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl){\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n            .success(function(response){\n              // put response to cache, with unmodified url as key\n              $templateCache.put(widget.templateUrl, response);\n              deferred.resolve(response);\n            })\n            .error(function(){\n              deferred.reject('could not load template');\n            });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        $element: $element.parent(),\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs){\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope){\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetReload', function(){\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetConfigChanged', function(event, params){\n          // Confirm this approach!\n          if ( $scope.model.widget === params.widget ) {\n            // extend widget config with params\n            angular.extend( $scope.model.config, params.config );\n            // ee-compile widget\n            currentScope = compileWidget( $scope, $element, currentScope );\n          }\n        });        \n      }\n    };\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('ngm')\n  .directive('ngmWidget', function($log, dashboard, ngmTemplatePath) {\n\n    function preLink($scope){\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n\n          // set id for sortable\n          if (!definition.wid){\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n         if(!$scope.widgetState){\n             $scope.widgetState ={};\n             $scope.widgetState.isCollapsed= false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind reload function\n        $scope.reload = function(){\n          $scope.$broadcast('widgetReload');\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: ngmTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n\n      controller: function ($scope) {\n        // \n      },\n\n      compile: function compile(){\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n","angular.module(\"ngm\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div ngm-id={{column.cid}} class=col ng-class=column.styleClass ng-model=column.widgets> <ngm-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column options=options widget-state=widgetState>  </ngm-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<div class=\\\"{{ model.header.div.class }}\\\" style=\\\"{{ model.header.div.style }}\\\"> <h2 class=\\\"{{ model.header.title.class }}\\\" style=\\\"{{ model.header.title.style }}\\\"> {{ model.header.title.title }} </h2> <div style=display:inline;> <p class=\\\"{{ model.header.subtitle.class }}\\\" style=\\\"{{ model.header.subtitle.style }}\\\"> {{ model.header.subtitle.title }} </p> <div class=\\\"{{ model.header.download.class }}\\\" style=\\\"{{ model.header.download.style }}\\\">  <div ng-repeat=\\\"download in model.header.download.downloads\\\">  <ngm-dashboard-download icon=download.icon type=download.type hover=download.hover filename=download.filename datakey=download.dataKey request=download.request metrics=download.metrics> </ngm-dashboard-download> </div> </div> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard> <ngm-dashboard-row row=row ngm-model=model options=options ng-repeat=\\\"row in model.rows\\\"> </ngm-dashboard-row> </div> </div> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div ngm-id=\\\"{{ definition.wid }}\\\" ngm-widget-type=\\\"{{ definition.type }}\\\" class=\\\"widget {{ definition.card }}\\\" style=\\\"{{ definition.style }}\\\"> <ngm-widget-content model=definition content=widget> </ngm-widget-content></div> \");}]);","!function(e,t){\"use strict\";angular.module(\"ngm\",[\"ngm.provider\"]).value(\"ngmTemplatePath\",\"../src/templates/\").value(\"rowTemplate\",'<ngm-dashboard-row row=\"row\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />').value(\"columnTemplate\",'<ngm-dashboard-column column=\"column\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />').value(\"ngmVersion\",\"0.0.3\"),angular.module(\"ngm\").directive(\"ngmDashboardColumn\",function(e,t,n,o,i){return{restrict:\"E\",replace:!0,scope:{column:\"=\",editMode:\"=\",ngmModel:\"=\",options:\"=\"},templateUrl:n+\"dashboard-column.html\",link:function(e,n){var l=e.column;l.cid||(l.cid=i.id()),t(o)(e,function(e){n.append(e)})}}}),angular.module(\"ngm\").service(\"ngmData\",function(e,t){return{get:function(n){var o=e.defer();return t(n).success(function(e){o.resolve(e)}).error(function(){o.reject()}),o.promise}}}).directive(\"ngmDashboard\",function(e,t,n,o){function i(e){switch(angular.isDefined(e)?e.toLowerCase():null){case\"true\":case\"yes\":case\"1\":return!0;case\"false\":case\"no\":case\"0\":case null:return!1;default:return Boolean(e)}}return{replace:!0,restrict:\"EA\",transclude:!1,scope:{structure:\"@\",name:\"@\",collapsible:\"@\",editable:\"@\",maximizable:\"@\",ngmModel:\"=\",ngmWidgetFilter:\"=\"},controller:function(e){var i={},l={},a=null,r={};e.name;e.ngmModel.updateWidgets=function(t){e.$broadcast(\"updateWidgetConfigs\",t)},e.$watch(\"ngmModel\",function(d,s){(null!==s||null===d&&null===s)&&(i=e.ngmModel,a=e.ngmWidgetFilter,i&&i.rows||(r=e.structure,l=n.structures[r],l?(i?i.rows=angular.copy(l).rows:i=angular.copy(l),i.structure=r):t.error(\"could not find structure \"+r)),i?(i.title||(i.title=\"Dashboard\"),i.titleTemplateUrl||(i.titleTemplateUrl=o+\"dashboard-title.html\"),e.model=i):t.error(\"could not find or create model\"))},!0),e.editMode=!1,e.editClass=\"\"},link:function(e,t,n){var o={name:n.name,editable:!0,maximizable:i(n.maximizable),collapsible:i(n.collapsible)};angular.isDefined(n.editable)&&(o.editable=i(n.editable)),e.options=o},templateUrl:o+\"dashboard.html\"}}).directive(\"ngmMenu\",function(){return{restrict:\"A\",link:function(e,t,n){setTimeout(function(){$(\".side-menu\").find(\"li\").each(function(e,t){$(t).attr(\"class\").search(\"active\")>0&&($(t).closest(\".bold\").attr(\"class\",\"bold active\"),$(t).closest(\".bold\").find(\"a\").attr(\"class\",$(t).closest(\".bold\").find(\"a\").attr(\"class\")+\" z-depth-1\"),$(t).closest(\".collapsible-body\").slideDown(),$(t).closest(\".collapsible-body\").attr(\"class\",$(t).closest(\".collapsible-body\").attr(\"class\")+\" active\"))})},0),t.bind(\"click\",function(e){t.toggleClass(\"active\"),t.find(\".collapsible-header\").toggleClass(\"z-depth-1\"),t.find(\".collapsible-body\").toggleClass(\"active\"),t.find(\".collapsible-body\").hasClass(\"active\")?t.find(\".collapsible-body\").slideDown():t.find(\".collapsible-body\").slideUp()})}}}).directive(\"ngmDashboardDownload\",function(e,t){var n={csv:function(e,n,o){t.get(n).then(function(t){var n,i=t[o].map(function(e){n=[];var t=[];angular.forEach(e,function(e,o){n.push(o),t.push(e)});var o=t.join();return o}),l=[];l.push(n.join()),l.push(i.join(\"\\n\"));var a=document.createElement(\"a\");a.href=\"data:attachment/csv,\"+encodeURIComponent(l),a.target=\"_blank\",a.download=e+\".csv\",document.body.appendChild(a),a.click(),a.remove()})},pdf:function(e,t,n){console.log(\"PDF\")},setMetrics:function(e){t.get(e).then(function(e){})}};return{restrict:\"EA\",replace:!0,template:'<a class=\"tooltipped\" data-position=\"top\" data-delay=\"50\" data-tooltip=\"{{ hover }}\" style=\"color: {{ icon.color }}\"><i class=\"{{ icon.size }} material-icons\">{{ icon.type }}</i></a>',scope:{icon:\"=\",type:\"=\",hover:\"=\",dataKey:\"=\",filename:\"=\",request:\"=\",metrics:\"=\"},link:function(e,t,o){$(\".tooltipped\").tooltip({tooltip:\"Download CSV\"}),e.icon={type:e.icon&&e.icon.type?e.icon.type:\"ic_assignment_returned\",color:e.icon&&e.icon.color?e.icon.color:\"\",size:e.icon&&e.icon.size?e.icon.size:\"small\"},e.type=e.type?e.type:\"csv\",e.hover=e.hover?e.hover:\"Download \"+e.type,e.dataKey=e.dataKey?e.dataKey:\"data\",e.filename=e.filename?e.filename:moment().format(),t.bind(\"click\",function(t){n[e.type](e.filename,e.request,e.dataKey),e.metrics&&n.setMetrics(e.metrics)})}}}),angular.module(\"ngm.provider\",[]).provider(\"dashboard\",function(){var e={},t=\"\",n={},o='<div class=\"alert alert-danger\">{}</div>',i='\t\t\t<div class=\"progress progress-striped active\">\\n\t\t\t\t<div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\t\t\t\t\t<span class=\"sr-only\">loading ...</span>\\n\t\t\t\t</div>\\n\t\t\t</div>';this.widget=function(t,n){var o=angular.extend({reload:!1},n);if(o.edit){var i={reload:!0};angular.extend(i,o.edit),o.edit=i}return e[t]=o,this},this.widgetsPath=function(e){return t=e,this},this.structure=function(e,t){return n[e]=t,this},this.messageTemplate=function(e){return o=e,this},this.loadingTemplate=function(e){return i=e,this},this.$get=function(){var l=0;return{widgets:e,widgetsPath:t,structures:n,messageTemplate:o,loadingTemplate:i,id:function(){return++l}}}}),angular.module(\"ngm\").directive(\"ngmDashboardRow\",function(e,t,n){return{restrict:\"E\",replace:!0,scope:{row:\"=\",ngmModel:\"=\",editMode:\"=\",options:\"=\"},templateUrl:t+\"dashboard-row.html\",link:function(t,o){angular.isDefined(t.row.columns)&&angular.isArray(t.row.columns)&&e(n)(t,function(e){o.append(e)})}}}),angular.module(\"ngm\").directive(\"ngmWidgetContent\",function(e,t,n,o,i,l,a,r,d){function s(e){var t=e;return e.indexOf(\"{widgetsPath}\")>=0&&(t=e.replace(\"{widgetsPath}\",d.widgetsPath).replace(\"//\",\"/\"),0===t.indexOf(\"/\")&&(t=t.substring(1))),t}function c(e){var l=t.defer();if(e.template)l.resolve(e.template);else if(e.templateUrl){var a=i.get(e.templateUrl);if(a)l.resolve(a);else{var r=n.getTrustedResourceUrl(s(e.templateUrl));o.get(r).success(function(t){i.put(e.templateUrl,t),l.resolve(t)}).error(function(){l.reject(\"could not load template\")})}}return l.promise}function u(n,o,i){var s=n.model,u=n.content;o.html(d.loadingTemplate);var m=n.$new();s.config||(s.config={}),m.config=s.config;var g={$scope:m,$element:o.parent(),widget:s,config:s.config},p={};return p.$tpl=c(u),u.resolve&&angular.forEach(u.resolve,function(e,t){angular.isString(e)?p[t]=r.get(e):p[t]=r.invoke(e,e,g)}),t.all(p).then(function(e){angular.extend(e,g);var t=e.$tpl;if(o.html(t),u.controller){var n=a(u.controller,e);u.controllerAs&&(m[u.controllerAs]=n),o.children().data(\"$ngControllerController\",n)}l(o.contents())(m)},function(t){var n=\"Could not resolve all promises\";t&&(n+=\": \"+t),e.warn(n),o.html(d.messageTemplate.replace(/{}/g,n))}),i&&i.$destroy(),m}return{replace:!0,restrict:\"EA\",transclude:!1,scope:{model:\"=\",content:\"=\"},link:function(e,t){var n=u(e,t,null);e.$on(\"widgetReload\",function(){n=u(e,t,n)}),e.$on(\"widgetConfigChanged\",function(o,i){e.model.widget===i.widget&&(angular.extend(e.model.config,i.config),n=u(e,t,n))})}}}),angular.module(\"ngm\").directive(\"ngmWidget\",function(e,t,n){function o(n){var o=n.definition;if(o){var i=t.widgets[o.type];if(i){o.wid||(o.wid=t.id()),n.widget=angular.copy(i);var l=o.config;l?angular.isString(l)&&(l=angular.fromJson(l)):l={},n.config=l,n.widgetState||(n.widgetState={},n.widgetState.isCollapsed=!1)}else e.warn(\"could not find widget \"+o.type)}else e.debug(\"definition not specified, widget was probably removed\")}function i(t,n){var o=t.definition;o?t.reload=function(){t.$broadcast(\"widgetReload\")}:e.debug(\"widget not found\")}return{replace:!0,restrict:\"EA\",transclude:!1,templateUrl:n+\"widget.html\",scope:{definition:\"=\",col:\"=column\",editMode:\"=\",options:\"=\",widgetState:\"=\"},controller:function(e){},compile:function(){return{pre:o,post:i}}}}),angular.module(\"ngm\").run([\"$templateCache\",function(e){e.put(\"../src/templates/dashboard-column.html\",'<div ngm-id={{column.cid}} class=col ng-class=column.styleClass ng-model=column.widgets> <ngm-widget ng-repeat=\"definition in column.widgets\" definition=definition column=column options=options widget-state=widgetState>  </ngm-widget></div> '),e.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \"),e.put(\"../src/templates/dashboard-title.html\",'<div class=\"{{ model.header.div.class }}\" style=\"{{ model.header.div.style }}\"> <h2 class=\"{{ model.header.title.class }}\" style=\"{{ model.header.title.style }}\"> {{ model.header.title.title }} </h2> <div style=display:inline;> <p class=\"{{ model.header.subtitle.class }}\" style=\"{{ model.header.subtitle.style }}\"> {{ model.header.subtitle.title }} </p> <div class=\"{{ model.header.download.class }}\" style=\"{{ model.header.download.style }}\">  <div ng-repeat=\"download in model.header.download.downloads\">  <ngm-dashboard-download icon=download.icon type=download.type hover=download.hover filename=download.filename datakey=download.dataKey request=download.request metrics=download.metrics> </ngm-dashboard-download> </div> </div> </div> </div> '),e.put(\"../src/templates/dashboard.html\",'<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard> <ngm-dashboard-row row=row ngm-model=model options=options ng-repeat=\"row in model.rows\"> </ngm-dashboard-row> </div> </div> '),e.put(\"../src/templates/widget.html\",'<div ngm-id=\"{{ definition.wid }}\" ngm-widget-type=\"{{ definition.type }}\" class=\"widget {{ definition.card }}\" style=\"{{ definition.style }}\"> <ngm-widget-content model=definition content=widget> </ngm-widget-content></div> ')}])}(window);\n//# sourceMappingURL=ngm-dashboard-framework.min.js.map"],"sourceRoot":"/source/"}