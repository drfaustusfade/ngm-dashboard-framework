{"version":3,"sources":["ngm.js","dashboard.js","provider.js","row.js","column.js","widget-content.js","widget.js","ngm-dashboard-framework.tpl.js","ngm-dashboard-framework.min.js"],"names":["window","undefined","angular","module","value","service","$q","$http","get","request","deferred","defer","then","response","resolve","data","reject","promise","responseType","err","directive","$rootScope","$log","$sce","dashboard","ngmTemplatePath","stringToBoolean","string","isDefined","toLowerCase","Boolean","replace","restrict","transclude","scope","structure","name","collapsible","editable","maximizable","ngmModel","ngmWidgetFilter","controller","$scope","model","widgetFilter","structureName","$watch","oldVal","newVal","rows","structures","copy","error","title","titleTemplateUrl","editMode","editClass","link","$element","$attr","options","templateUrl","el","attr","setTimeout","$","find","each","i","d","search","closest","slideDown","bind","$event","toggleClass","hasClass","slideUp","$timeout","ngmData","ngmDataSteam","download","csv","csvData","Blob","type","csvUrl","URL","createObjectURL","document","createElement","href","target","report","body","appendChild","click","remove","modal","M","toast","xlsx","filename","disposition","headers","contentType","indexOf","filenameRegex","matches","exec","xlsxData","xlsxUrl","params","html","statusText","displayLength","pdf","viewportWidth","width","viewportHeight","height","open","downloadUrl","zip","download_url","message","client","blob","mimetype","fUrl","setMetrics","template","icon","color","hover","url","metrics","toUpperCase","tooltip","$e","dismissible","priority","element","ngModel","trigger","is","$compile","style","append","dateFormat","token","timezone","timezoneClip","pad","val","len","String","length","date","mask","utc","dF","arguments","Object","prototype","toString","call","test","Date","isNaN","SyntaxError","getUTCFullYear","getUTCMonth","getUTCDate","masks","slice","_","D","m","y","H","s","L","o","getTimezoneOffset","flags","dd","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","Math","round","t","tt","T","TT","Z","match","pop","floor","abs","S","$0","default","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","format","this","isValidDate","getTime","require","container","formatSubmit","monthsFull","monthsShort","weekdaysFull","weekdaysShort","weekdaysLetter","firstDay","disable","today","clear","close","selectYears","onStart","onRender","onOpen","onClose","onSet","onStop","ngReadonly","max","min","attrs","ngModelCtrl","$formatters","unshift","modelValue","$eval","contents","event","select","picker","Datepicker","init","getInstance","setDate","setDefaultDate","newMax","maxDate","newMin","minDate","newDisabled","disabledDates","isArray","disableDayFn","provider","widgets","widgetsPath","messageTemplate","loadingTemplate","widget","w","extend","reload","edit","path","$get","cid","id","columnTemplate","row","columns","cloned","rowTemplate","column","col","$templateCache","$controller","$injector","parseUrl","parsedUrl","substring","getTemplate","tpl","getTrustedResourceUrl","put","compileWidget","currentScope","content","templateScope","$new","config","base","parent","resolvers","$tpl","forEach","key","isString","invoke","all","locals","templateCtrl","controllerAs","children","reason","msg","warn","$destroy","$on","broadcast","merge","preLink","definition","wid","fromJson","widgetState","isCollapsed","debug","postLink","$broadcast","compile","pre","post","run"],"mappings":"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","file":"ngm-dashboard-framework.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('ngm', ['ngm.provider'])\n  .value('ngmTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<ngm-dashboard-row row=\"row\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<ngm-dashboard-column column=\"column\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('ngmVersion', '<<ngmVersion>>');\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name ngm.directive:ngmDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `ngmDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} ngmModel model object of the dashboard.\n * @param {function=} ngmWidgetFilter function to filter widgets on the add dialog.\n */\n\nangular.module('ngm')\n\t.service('ngmData', ['$q', '$http', function($q, $http){\n\t\treturn {\n\t\t\tget: function(request){\n\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t$http(request)\n\t\t\t\t\t.then(function(response){\n\t\t\t\t\t\tdeferred.resolve(response.data);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(function(response){\n\t\t\t\t\t\tdeferred.reject(response.data);\n\t\t\t\t\t});\n\n\t\t\t\treturn deferred.promise;\n\t\t\t}\n\t\t};\n\t}])\n\t.service('ngmDataSteam', ['$q', '$http', function($q, $http){\n\t\treturn {\n\t\t\tget: function(request){\n\t\t\t\tvar deferred = $q.defer();\n\t\t\t\trequest.responseType = 'arraybuffer';\n\t\t\t\t$http(request)\n\t\t\t\t\t.then(function onSuccess(response) {\n\t\t\t\t\t\tdeferred.resolve(response);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(function onError(err) {\n\t\t\t\t\t\tdeferred.reject(err);\n\t\t\t\t\t})\n\n\t\t\t\treturn deferred.promise;\n\t\t\t}\n\t\t};\n\t}])\n\t.directive('ngmDashboard', ['$rootScope', '$log', '$sce', 'dashboard', 'ngmTemplatePath', function ($rootScope, $log, $sce, dashboard, ngmTemplatePath) {\n\t\t'use strict';\n\n\t\tfunction stringToBoolean(string){\n\t\t\tswitch(angular.isDefined(string) ? string.toLowerCase() : null){\n\t\t\t\tcase 'true': case 'yes': case '1': return true;\n\t\t\t\tcase 'false': case 'no': case '0': case null: return false;\n\t\t\t\tdefault: return Boolean(string);\n\t\t\t}\n\t\t}\n\n\t\tfunction copyWidgets(source, target) {\n\t\t\tif ( source.widgets && source.widgets.length > 0 ){\n\t\t\t\tvar w = source.widgets.shift();\n\t\t\t\twhile (w){\n\t\t\t\t\ttarget.widgets.push(w);\n\t\t\t\t\tw = source.widgets.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Copy widget from old columns to the new model\n\t\t* @param object root the model\n\t\t* @param array of columns\n\t\t* @param counter\n\t\t*/\n\t\tfunction fillStructure(root, columns, counter) {\n\t\t\tcounter = counter || 0;\n\n\t\t\tif (angular.isDefined(root.rows)) {\n\t\t\t\tangular.forEach(root.rows, function (row) {\n\t\t\t\t\tangular.forEach(row.columns, function (column) {\n\t\t\t\t\t\t// if the widgets prop doesn't exist, create a new array for it.\n\t\t\t\t\t\t// this allows ui.sortable to do it's thing without error\n\t\t\t\t\t\tif (!column.widgets) {\n\t\t\t\t\t\t\tcolumn.widgets = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if a column exist at the counter index, copy over the column\n\t\t\t\t\t\tif (angular.isDefined(columns[counter])) {\n\t\t\t\t\t\t\t// do not add widgets to a column, which uses nested rows\n\t\t\t\t\t\t\tif (!angular.isDefined(column.rows)){\n\t\t\t\t\t\t\t\tcopyWidgets(columns[counter], column);\n\t\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// run fillStructure again for any sub rows/columns\n\t\t\t\t\t\tcounter = fillStructure(column, columns, counter);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t\t/**\n\t\t* Read Columns: recursively searches an object for the 'columns' property\n\t\t* @param object model\n\t\t* @param array  an array of existing columns; used when recursion happens\n\t\t*/\n\t\tfunction readColumns(root, columns) {\n\t\t\tcolumns = columns || [];\n\n\t\t\tif (angular.isDefined(root.rows)) {\n\t\t\t\tangular.forEach(root.rows, function (row) {\n\t\t\t\t\tangular.forEach(row.columns, function (col) {\n\t\t\t\t\t\tcolumns.push(col);\n\t\t\t\t\t\t// keep reading columns until we can't any more\n\t\t\t\t\t\treadColumns(col, columns);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn columns;\n\t\t}\n\n\t\tfunction changeStructure(model, structure){\n\t\t\tvar columns = readColumns(model);\n\t\t\tvar counter = 0;\n\n\t\t\tmodel.rows = angular.copy(structure.rows);\n\n\t\t\twhile ( counter < columns.length ){\n\t\t\t\tcounter = fillStructure(model, columns, counter);\n\t\t\t}\n\t\t}\n\n\t\tfunction createConfiguration(type){\n\t\t\tvar cfg = {};\n\t\t\tvar config = dashboard.widgets[type].config;\n\t\t\tif (config){\n\t\t\t\tcfg = angular.copy(config);\n\t\t\t}\n\t\t\treturn cfg;\n\t\t}\n\n\t\t/**\n\t\t * Find first widget column in model.\n\t\t *\n\t\t * @param dashboard model\n\t\t */\n\t\tfunction findFirstWidgetColumn(model){\n\t\t\tvar column = null;\n\t\t\tif (!angular.isArray(model.rows)){\n\t\t\t\t$log.error('model does not have any rows');\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tfor (var i=0; i<model.rows.length; i++){\n\t\t\t\tvar row = model.rows[i];\n\t\t\t\tif (angular.isArray(row.columns)){\n\t\t\t\t\tfor (var j=0; j<row.columns.length; j++){\n\t\t\t\t\t\tvar col = row.columns[j];\n\t\t\t\t\t\tif (!col.rows){\n\t\t\t\t\t\t\tcolumn = col;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (column){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn column;\n\t\t}\n\n\t\treturn {\n\t\t\treplace: true,\n\t\t\trestrict: 'EA',\n\t\t\ttransclude : false,\n\t\t\tscope: {\n\t\t\t\tstructure: '@',\n\t\t\t\tname: '@',\n\t\t\t\tcollapsible: '@',\n\t\t\t\teditable: '@',\n\t\t\t\tmaximizable: '@',\n\t\t\t\tngmModel: '=',\n\t\t\t\tngmWidgetFilter: '='\n\t\t\t},\n\t\t\tcontroller: ['$scope', function($scope){\n\t\t\t\tvar model = {};\n\t\t\t\tvar structure = {};\n\t\t\t\tvar widgetFilter = null;\n\t\t\t\tvar structureName = {};\n\t\t\t\tvar name = $scope.name;\n\n\t\t\t\t// Update widget configs with broadcast\n\t\t\t\t// if($scope.ngmModel){\n\t\t\t\t// \t$scope.ngmModel.updateWidgets = function(params){\n\t\t\t\t// \t\t$scope.$broadcast( 'widgetConfigChanged', params );\n\t\t\t\t// \t}\n\t\t\t\t// }\n\n\t\t\t\t// Watching for changes on ngmModel\n\t\t\t\t$scope.$watch('ngmModel', function(oldVal, newVal) {\n\t\t\t\t\t// has model changed or is the model attribute not set\n\t\t\t\t\tif (newVal !== null || (oldVal === null && newVal === null)) {\n\t\t\t\t\t\tmodel = $scope.ngmModel;\n\t\t\t\t\t\twidgetFilter = $scope.ngmWidgetFilter;\n\t\t\t\t\t\tif ( ! model || ! model.rows ){\n\t\t\t\t\t\t\tstructureName = $scope.structure;\n\t\t\t\t\t\t\tstructure = dashboard.structures[structureName];\n\t\t\t\t\t\t\tif (structure){\n\t\t\t\t\t\t\t\tif (model){\n\t\t\t\t\t\t\t\t\tmodel.rows = angular.copy(structure).rows;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tmodel = angular.copy(structure);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmodel.structure = structureName;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$log.error( 'could not find structure ' + structureName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (model) {\n\t\t\t\t\t\t\tif (!model.title){\n\t\t\t\t\t\t\t\tmodel.title = 'Dashboard';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!model.titleTemplateUrl) {\n\t\t\t\t\t\t\t\tmodel.titleTemplateUrl = ngmTemplatePath + 'dashboard-title.html';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$scope.model = model;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$log.error('could not find or create model');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, true);\n\n\t\t\t\t// edit mode\n\t\t\t\t$scope.editMode = false;\n\t\t\t\t$scope.editClass = '';\n\n\t\t\t}],\n\t\t\tlink: function ($scope, $element, $attr) {\n\t\t\t\t// pass options to scope\n\t\t\t\tvar options = {\n\t\t\t\t\tname: $attr.name,\n\t\t\t\t\teditable: true,\n\t\t\t\t\tmaximizable: stringToBoolean($attr.maximizable),\n\t\t\t\t\tcollapsible: stringToBoolean($attr.collapsible)\n\t\t\t\t};\n\t\t\t\tif (angular.isDefined($attr.editable)){\n\t\t\t\t\toptions.editable = stringToBoolean($attr.editable);\n\t\t\t\t}\n\t\t\t\t$scope.options = options;\n\t\t\t},\n\t\t\ttemplateUrl: ngmTemplatePath + 'dashboard.html'\n\t\t};\n\t}])\n\t// toggles accordian classes for\n\t.directive('ngmMenu', function() {\n\n\t\treturn {\n\n\t\t\t// Restrict it to be an attribute in this case\n\t\t\trestrict: 'A',\n\n\t\t\t// responsible for registering DOM listeners as well as updating the DOM\n\t\t\tlink: function(scope, el, attr) {\n\n\t\t\t\t// set initial menu style - has to be a better way?\n\t\t\t\tsetTimeout(function(){\n\n\t\t\t\t\t// For all itmes\n\t\t\t\t\t$('.side-menu').find('li').each(function(i, d) {\n\n\t\t\t\t\t\t// find the row that is active\n\t\t\t\t\t\tif ($(d).attr('class').search('active') > 0) {\n\n\t\t\t\t\t\t\t// set list header\n\t\t\t\t\t\t\t$(d).closest('.bold').attr('class', 'bold active');\n\n\t\t\t\t\t\t\t// set z-depth-1\n\t\t\t\t\t\t\t$(d).closest('.bold').find('a').attr('class',\n\t\t\t\t\t\t\t\t\t$(d).closest('.bold').find('a').attr('class') + ' z-depth-1' );\n\n\t\t\t\t\t\t\t// slide down list\n\t\t\t\t\t\t\t$(d).closest('.collapsible-body').slideDown();\n\t\t\t\t\t\t\t$(d).closest('.collapsible-body').attr('class',\n\t\t\t\t\t\t\t\t$(d).closest('.collapsible-body').attr('class') + ' active');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t}, 0);\n\n\t\t\t\t// on element click\n\t\t\t\tel.bind( 'click', function( $event ) {\n\n\t\t\t\t\t// toggle list\n\t\t\t\t\tel.toggleClass('active');\n\t\t\t\t\t// toggle list\n\t\t\t\t\tel.find('.collapsible-header').toggleClass('z-depth-1');\n\n\t\t\t\t\t// toggle list rows active\n\t\t\t\t\tel.find('.collapsible-body').toggleClass('active');\n\n\t\t\t\t\t// toggle list rows animation\n\t\t\t\t\tif (el.find('.collapsible-body').hasClass('active')) {\n\t\t\t\t\t\tel.find('.collapsible-body').slideDown();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tel.find('.collapsible-body').slideUp();\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t})\n\t.directive('ngmDashboardDownload', [ '$timeout', 'dashboard', 'ngmData', 'ngmDataSteam',  function( $timeout, dashboard, ngmData, ngmDataSteam ) {\n\n\t\t// client side download\n\t\tvar download = {\n\n\t\t\t// prepare and stream CSV to client\n\t\t\t'csv': function(request){\n\t\t\t\t// get data\n\t\t\t\tngmData.get(request)\n\t\t\t\t\t//\n\t\t\t\t\t.then(function(csv){\n\n\t\t\t\t\t\t// save as blob\n\t\t\t\t\t\tvar csvData = new Blob([ csv.data ], { type: 'text/csv' });\n\t\t\t\t\t\tvar csvUrl = URL.createObjectURL( csvData );\n\n\t\t\t\t\t\tvar el = document.createElement('a');\n\t\t\t\t\t\t\tel.href =  csvUrl;\n\t\t\t\t\t\t\tel.target = '_blank';\n\t\t\t\t\t\t\tel.download = request.data.report + '.csv';\n\n\t\t\t\t\t\t// append, download & remove\n\t\t\t\t\t\tdocument.body.appendChild(el);\n\t\t\t\t\t\tel.click();\n\t\t\t\t\t\tel.remove();\n\n\t\t\t\t\t\t// close loading mask\n\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\n\t\t\t\t\t},function(data){\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\t\t// error msg\n\t\t\t\t\t\tM.toast(data.error, 4000);\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\t// prepare and stream XLSX to client\n\t\t\t'xlsx': function(request){\n\t\t\t\t// get data\n\t\t\t\tngmDataSteam.get(request)\n\t\t\t\t\t.then(function(response){\n\n\t\t\t\t\t\tvar filename = \"\";\n\t\t\t\t\t\tvar disposition = response.headers('Content-Disposition');\n\t\t\t\t\t\tvar contentType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n\t\t\t\t\t\t// var contentType = xlsx.headers('Content-Type');\n\n\t\t\t\t\t\tif (disposition && disposition.indexOf('attachment') !== -1) {\n\t\t\t\t\t\t\t\tvar filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n\t\t\t\t\t\t\t\tvar matches = filenameRegex.exec(disposition);\n\t\t\t\t\t\t\t\tif (matches != null && matches[1]) filename = matches[1].replace(/['\"]/g, '');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// save as blob\n\t\t\t\t\t\tvar xlsxData = new Blob([ response.data ], { type: contentType });\n\t\t\t\t\t\tvar xlsxUrl = URL.createObjectURL( xlsxData );\n\n\t\t\t\t\t\tvar el = document.createElement('a');\n\t\t\t\t\t\t\tel.href =  xlsxUrl;\n\n\t\t\t\t\t\tif (request.data) {\n\t\t\t\t\t\t\tfilename = request.data.report ? request.data.report + '.xlsx' : filename;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (request.params) {\n\t\t\t\t\t\t\tfilename = request.params.report ? request.params.report + '.xlsx' : filename;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tel.download = filename\n\n\t\t\t\t\t\t// append, download & remove\n\t\t\t\t\t\tdocument.body.appendChild(el);\n\t\t\t\t\t\tel.click();\n\t\t\t\t\t\tel.remove();\n\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\n\t\t\t\t\t},function(data){\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\t\t// error msg\n\t\t\t\t\t\tM.toast({ html: data.statusText, displayLength: 4000 });\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\t// client side PDF generation\n\t\t\t'pdf': function(request){\n\n\t\t\t\t// get width on runtime if no defined\n\t\t\t\tif (!request.data.viewportWidth) {\n\t\t\t\t\trequest.data.viewportWidth = $(window).width();\n\t\t\t\t}\n\t\t\t\t// get height on runtime if no defined\n\t\t\t\tif (!request.data.viewportHeight) {\n\t\t\t\t\trequest.data.viewportHeight = $(document).height();\n\t\t\t\t}\n\t\t\t\t// get data\n\t\t\t\tngmData.get(request)\n\t\t\t\t\t//\n\t\t\t\t\t.then(function(response){\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\t\t// open in new tab\n\t\t\t\t\t\twindow.open(request.data.downloadUrl + response.report, '_blank');\n\t\t\t\t\t},function(data){\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\t\t// error msg\n\t\t\t\t\t\tM.toast(data.error, 4000);\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\t// download zip archive from link\n\t\t\t'zip': function(request){\n\t\t\t\t// get data\n\t\t\t\tngmData.get(request)\n\t\t\t\t\t.then(function(response){\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\t\t// open in new tab\n\t\t\t\t\t\tresponse.download_url ? window.open(response.download_url, '_blank') : M.toast(response.message, 4000);\n\t\t\t\t\t},function(err){\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\t\t// error msg\n\t\t\t\t\t\tM.toast(err.error.message, 4000);\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\t// download client side\n\t\t\t'client': function(request){\n\t\t\t\trequest.function().then(function (data) {\n\t\t\t\t\tvar blob = new Blob([data], { type: request.mimetype ? request.mimetype : \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" });\n\t\t\t\t\tvar fUrl = URL.createObjectURL( blob );\n\t\t\t\t\tvar el = document.createElement('a');\n\t\t\t\t\tel.href =  fUrl;\n\t\t\t\t\tel.download = request.filename ? request.filename : 'Data';\n\t\t\t\t\t// append, download & remove\n\t\t\t\t\tdocument.body.appendChild(el);\n\t\t\t\t\tel.click();\n\t\t\t\t\tel.remove();\n\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t}, function () {\n\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\tM.toast({ html: 'Download Error!', displayLength: 4000 });\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t// writes metrics to rest api\n\t\t\t'setMetrics': function(request){\n\t\t\t\tngmData.get(request)\n\t\t\t\t\t.then(function(data){\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\t// element or attrbute\n\t\t\trestrict: 'EA',\n\n\t\t\treplace: true,\n\n\t\t\ttemplate: '<li><a id=\"{{ type + icon }}\" class=\"btn-floating {{ color }} z-depth-2 tooltipped\" data-position=\"bottom\" data-tooltip=\"{{ hover }}\" data-delay=\"50\"><i class=\"material-icons\">{{ icon }}</i></a></li>',\n\n\t\t\tscope: {\n\t\t\t\ttype: '=',\n\t\t\t\ticon: '=',\n\t\t\t\tcolor: '=',\n\t\t\t\thover: '=',\n\t\t\t\turl: '=',\n\t\t\t\trequest: '=',\n\t\t\t\tmetrics: '='\n\t\t\t},\n\n\t\t\t// onclick\n\t\t\tlink: function(scope, el, attr) {\n\n\t\t\t\t// set defaults\n\t\t\t\tscope.type = scope.type ? scope.type : 'csv';\n\t\t\t\tscope.icon = scope.icon ? scope.icon : 'cloud_download';\n\t\t\t\tscope.color = scope.color ? scope.color : 'blue';\n\t\t\t\tscope.hover = scope.hover ? scope.hover : 'Download ' + scope.type.toUpperCase();\n\n\t\t\t\t// init tooltip\n\t\t\t\t$timeout(function(){\n\t\t\t\t\t$('#' + scope.type + scope.icon ).tooltip();\n\t\t\t\t}, 0);\n\n\t\t\t\t// bind download event\n\t\t\t\tel.bind( 'click', function($e) {\n\n\t\t\t\t\t// if simple download url exists\n\t\t\t\t\tif(scope.url){\n\n\t\t\t\t\t\twindow.open(scope.url, '_blank');\n\n\t\t\t\t\t// else download process\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// open loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal({ dismissible: false });\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('open');\n\n\t\t\t\t\t\t// prepare download\n\t\t\t\t\t\tdownload[scope.type](scope.request);\n\n\t\t\t\t\t\t// record metrics\n\t\t\t\t\t\tif (scope.metrics) {\n\t\t\t\t\t\t\tdownload.setMetrics(scope.metrics);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t}\n\t\t}\n\t}])\n\t.directive(\"ngModel\", [\"$timeout\", function($timeout){\n\t\treturn {\n\t\t\trestrict: 'A',\n\t\t\tpriority: -1, // lower priority than built-in ng-model so it runs first\n\t\t\tlink: function(scope, element, attr) {\n\t\t\t\tscope.$watch(attr.ngModel,function(value){\n\t\t\t\t\t$timeout(function () {\n\t\t\t\t\t\tif (value){\n\t\t\t\t\t\t\t\telement.trigger(\"change\");\n\t\t\t\t\t\t} else if(element.attr('placeholder') === undefined) {\n\t\t\t\t\t\t\tif(!element.is(\":focus\")) {\n\t\t\t\t\t\t\t\telement.trigger(\"blur\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}])\n  /**\n   * Add pickadate directive\n   * Type text is mandatory\n   * Source: https://github.com/krescruz/angular-materialize/\n   * Example:\n   <input ngm-date\n      type=\"text\"\n      name=\"created\"\n      id=\"inputCreated\"\n      ng-model=\"currentTime\"\n      format=\"dd/mm/yyyy\"\n      months-full=\"{{ monthFr }}\"\n      months-short=\"{{ monthShortFr }}\"\n      weekdays-full=\"{{ weekdaysFullFr }}\"\n      weekdays-short=\"{{ weekdaysShortFr }}\"\n      weekdays-letter=\"{{ weekdaysLetterFr }}\"\n      disable=\"disable\"\n      today=\"today\"\n      clear=\"clear\"\n      close=\"close\"\n      on-start=\"onStart()\"\n      on-render=\"onRender()\"\n      on-open=\"onOpen()\"\n      on-close=\"onClose()\"\n      on-set=\"onSet()\"\n      on-stop=\"onStop()\" />\n   */\n  .directive('ngmDate', [\"$compile\", \"$timeout\", function ($compile, $timeout) {\n      // Fix for issue 46. This gotta be a bug in the materialize code, but this fixes it.\n      var style = $('<style>#inputCreated_root {outline: none;}</style>');\n      $('html > head').append(style);\n\n      // Define Prototype Date format\n      // Use like this\n      // today = new Date();\n      // var dateString = today.format(\"dd-m-yy\");\n      var dateFormat = function () {\n\n          var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n              timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n              timezoneClip = /[^-+\\dA-Z]/g,\n              pad = function (val, len) {\n                  val = String(val);\n                  len = len || 2;\n                  while (val.length < len) {\n                      val = \"0\" + val;\n                  }\n                  return val;\n              };\n\n          // Regexes and supporting functions are cached through closure\n          return function (date, mask, utc) {\n\n              var dF = dateFormat;\n\n              // You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n              if (arguments.length === 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\n                  mask = date;\n                  date = undefined;\n              }\n\n              // Passing date through Date applies Date.parse, if necessary\n              date = date ? new Date(date) : new Date();\n              if (isNaN(date)) throw SyntaxError(\"invalid date\");\n\n              // force UTC\n              date = new Date( date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0 );\n\n              // mask?\n              mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\n\n              // Allow setting the utc argument via the mask\n              if (mask.slice(0, 4) == \"UTC:\") {\n                  mask = mask.slice(4);\n                  utc = true;\n              }\n\n              var _ = utc ? \"getUTC\" : \"get\",\n                  d = date[ _ + \"Date\" ](),\n                  D = date[ _ + \"Day\" ](),\n                  m = date[ _ + \"Month\" ](),\n                  y = date[ _ + \"FullYear\" ](),\n                  H = date[ _ + \"Hours\" ](),\n                  M = date[ _ + \"Minutes\" ](),\n                  s = date[ _ + \"Seconds\" ](),\n                  L = date[ _ + \"Milliseconds\" ](),\n                  o = utc ? 0 : date.getTimezoneOffset(),\n                  flags = {\n                      d:    d,\n                      dd:   pad(d),\n                      ddd:  dF.i18n.dayNames[D],\n                      dddd: dF.i18n.dayNames[D + 7],\n                      m:    m + 1,\n                      mm:   pad(m + 1),\n                      mmm:  dF.i18n.monthNames[m],\n                      mmmm: dF.i18n.monthNames[m + 12],\n                      yy:   String(y).slice(2),\n                      yyyy: y,\n                      h:    H % 12 || 12,\n                      hh:   pad(H % 12 || 12),\n                      H:    H,\n                      HH:   pad(H),\n                      M:    M,\n                      MM:   pad(M),\n                      s:    s,\n                      ss:   pad(s),\n                      l:    pad(L, 3),\n                      L:    pad(L > 99 ? Math.round(L / 10) : L),\n                      t:    H < 12 ? \"a\"  : \"p\",\n                      tt:   H < 12 ? \"am\" : \"pm\",\n                      T:    H < 12 ? \"A\"  : \"P\",\n                      TT:   H < 12 ? \"AM\" : \"PM\",\n                      Z:    utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\n                      o:    (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n                      S:    [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n                  };\n\n              return mask.replace(token, function ($0) {\n                  return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n              });\n          };\n      }();\n\n      // Some common format strings\n      dateFormat.masks = {\n         \"default\":      \"ddd mmm dd yyyy HH:MM:ss\",\n          shortDate:      \"m/d/yy\",\n          mediumDate:     \"mmm d, yyyy\",\n          longDate:       \"mmmm d, yyyy\",\n          fullDate:       \"dddd, mmmm d, yyyy\",\n          shortTime:      \"h:MM TT\",\n          mediumTime:     \"h:MM:ss TT\",\n          longTime:       \"h:MM:ss TT Z\",\n          isoDate:        \"yyyy-mm-dd\",\n          isoTime:        \"HH:MM:ss\",\n          isoDateTime:    \"yyyy-mm-dd'T'HH:MM:ss\",\n          isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\n      };\n\n      // Internationalization strings\n      dateFormat.i18n = {\n          dayNames: [\n              \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\n              \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n          ],\n          monthNames: [\n              \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n              \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n          ]\n      };\n\n      // For convenience...\n      Date.prototype.format = function (mask, utc) {\n          return dateFormat(this, mask, utc);\n      };\n\n      /**\n       * Validate date object\n       * @param  {Date}  date\n       * @return {Boolean}\n       */\n      var isValidDate = function(date) {\n          if( Object.prototype.toString.call(date) === '[object Date]' ) {\n              return !isNaN(date.getTime());\n          }\n          return false;\n      };\n\n      return {\n          require: 'ngModel',\n          scope: {\n              container: \"@\",\n              format: \"@\",\n              formatSubmit: \"@\",\n              monthsFull: \"@\",\n              monthsShort: \"@\",\n              weekdaysFull: \"@\",\n              weekdaysShort: \"@\",\n              weekdaysLetter: \"@\",\n              firstDay: \"=\",\n              disable: \"=\",\n              today: \"=\",\n              clear: \"=\",\n              close: \"=\",\n              selectYears: \"=\",\n              onStart: \"&\",\n              onRender: \"&\",\n              onOpen: \"&\",\n              onClose: \"&\",\n              onSet: \"&\",\n              onStop: \"&\",\n              ngReadonly: \"=?\",\n              max: \"@\",\n              min: \"@\"\n          },\n          link: function (scope, element, attrs, ngModelCtrl) {\n\n              ngModelCtrl.$formatters.unshift(function (modelValue) {\n                  if (modelValue) {\n                      var date = new Date(modelValue);\n                      return (angular.isDefined(scope.format)) ? date.format(scope.format) : date.format('d mmmm, yyyy');\n                  }\n                  return null;\n              });\n\n              var monthsFull = (angular.isDefined(scope.monthsFull)) ? scope.$eval(scope.monthsFull) : undefined,\n                  monthsShort = (angular.isDefined(scope.monthsShort)) ? scope.$eval(scope.monthsShort) : undefined,\n                  weekdaysFull = (angular.isDefined(scope.weekdaysFull)) ? scope.$eval(scope.weekdaysFull) : undefined,\n                  weekdaysShort = (angular.isDefined(scope.weekdaysShort)) ? scope.$eval(scope.weekdaysShort) : undefined,\n                  weekdaysLetter = (angular.isDefined(scope.weekdaysLetter)) ? scope.$eval(scope.weekdaysLetter) : undefined;\n\n\n              $compile(element.contents())(scope);\n              if (!(scope.ngReadonly)) {\n                  $timeout(function () {\n                      var options = {\n                          container : scope.container,\n                          format: (angular.isDefined(scope.format)) ? scope.format : undefined,\n                          formatSubmit: (angular.isDefined(scope.formatSubmit)) ? scope.formatSubmit : undefined,\n                          monthsFull: (angular.isDefined(monthsFull)) ? monthsFull : undefined,\n                          monthsShort: (angular.isDefined(monthsShort)) ? monthsShort : undefined,\n                          weekdaysFull: (angular.isDefined(weekdaysFull)) ? weekdaysFull : undefined,\n                          weekdaysShort: (angular.isDefined(weekdaysShort)) ? weekdaysShort : undefined,\n                          weekdaysLetter: (angular.isDefined(weekdaysLetter)) ? weekdaysLetter : undefined,\n                          firstDay: (angular.isDefined(scope.firstDay)) ? scope.firstDay : 0,\n                          disable: (angular.isDefined(scope.disable)) ? scope.disable : undefined,\n                          today: (angular.isDefined(scope.today)) ? scope.today : undefined,\n                          clear: (angular.isDefined(scope.clear)) ? scope.clear : undefined,\n                          close: (angular.isDefined(scope.close)) ? scope.close : undefined,\n                          selectYears: (angular.isDefined(scope.selectYears)) ? scope.selectYears : undefined,\n                          onStart: (angular.isDefined(scope.onStart)) ? function(){ scope.onStart(); } : undefined,\n                          onRender: (angular.isDefined(scope.onRender)) ? function(){ scope.onRender(); } : undefined,\n                          onOpen: (angular.isDefined(scope.onOpen)) ? function(){ scope.onOpen(); } : undefined,\n                          onClose: (angular.isDefined(scope.onClose)) ? function(){ scope.onClose(); } : undefined,\n                          // onSet: (angular.isDefined(scope.onSet)) ? function(event){ if(event.select) { var picker = this; setTimeout(function(){ picker.close(); }, 0, picker); } } : undefined,\n                          onSet: (angular.isDefined(scope.onSet)) ? function(event){ if(event.select) { this.close(); } } : undefined,\n                          onStop: (angular.isDefined(scope.onStop)) ? function(){ scope.onStop(); } : undefined\n                      };\n                      if (!scope.container) {\n                          delete options.container;\n                      }\n\t\t\t\t\t//   var pickadateInput = element.pickadate(options);\n\t\t\t\t\t  var instance = M.Datepicker.init(element, options);\n                      //pickadate API\n\t\t\t\t\t//   var picker = pickadateInput.pickadate('picker');\n\t\t\t\t\t  var picker = M.Datepicker.getInstance(element);\n\t\t\t\t\t  picker.setDate(element[0].value)\n\t\t\t\t\t  picker.options.setDefaultDate = true;\n\n                      //watcher of min, max, and disabled dates\n                      scope.$watch('max', function(newMax) {\n                          if( picker ) {\n                              var maxDate = new Date(newMax);\n\t\t\t\t\t\t\t//   picker.set({max: isValidDate(maxDate) ? maxDate : false});\n\t\t\t\t\t\t\t  picker.options.maxDate = isValidDate(maxDate) ? maxDate : false;\n                          }\n                      });\n                      scope.$watch('min', function(newMin) {\n                          if( picker ) {\n                              var minDate = new Date(newMin);\n\t\t\t\t\t\t\t//   picker.set({min: isValidDate(minDate) ? minDate : false});\n\t\t\t\t\t\t\t  picker.options.minDate = isValidDate(minDate) ? minDate : false;\n                          }\n                      });\n                      scope.$watch('disable', function(newDisabled) {\n                          if( picker ) {\n                              var disabledDates = angular.isDefined(newDisabled) && angular.isArray(newDisabled) ? newDisabled : false;\n\t\t\t\t\t\t\t//   picker.set({disable: disabledDates});\n\t\t\t\t\t\t\t  picker.options.disableDayFn = disabledDates;\n                          }\n                      });\n                  });\n              }\n          }\n      };\n  }]);\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name ngm.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('ngm.provider', [])\n\t.provider('dashboard', function(){\n\n\t\tvar widgets = {};\n\t\tvar widgetsPath = '';\n\t\tvar structures = {};\n\t\tvar messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n\t\tvar loadingTemplate = '\\\n\t\t\t<div class=\"progress progress-striped active\">\\n\\\n\t\t\t\t<div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n\t\t\t\t\t<span class=\"sr-only\">loading ...</span>\\n\\\n\t\t\t\t</div>\\n\\\n\t\t\t</div>';\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#widget\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Registers a new widget.\n\t\t*\n\t\t* @param {string} name of the widget\n\t\t* @param {object} widget to be registered.\n\t\t*\n\t\t*   Object properties:\n\t\t*\n\t\t*   - `title` - `{string=}` - The title of the widget.\n\t\t*   - `description` - `{string=}` - Description of the widget.\n\t\t*   - `config` - `{object}` - Predefined widget configuration.\n\t\t*   - `controller` - `{string=|function()=}` - Controller fn that should be\n\t\t*      associated with newly created scope of the widget or the name of a\n\t\t*      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n\t\t*      if passed as a string.\n\t\t*   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n\t\t*      published to scope under the `controllerAs` name.\n\t\t*   - `template` - `{string=|function()=}` - html template as a string.\n\t\t*   - `templateUrl` - `{string=}` - path to an html template.\n\t\t*   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n\t\t*   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n\t\t*      be injected into the controller. If any of these dependencies are promises, the widget\n\t\t*      will wait for them all to be resolved or one to be rejected before the controller is\n\t\t*      instantiated.\n\t\t*      If all the promises are resolved successfully, the values of the resolved promises are\n\t\t*      injected.\n\t\t*\n\t\t*      The map object is:\n\t\t*      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n\t\t*      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n\t\t*        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n\t\t*        and the return value is treated as the dependency. If the result is a promise, it is\n\t\t*        resolved before its value is injected into the controller.\n\t\t*   - `edit` - `{object}` - Edit modus of the widget.\n\t\t*      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n\t\t*        Default is true.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.widget = function(name, widget){\n\t\t\tvar w = angular.extend({reload: false}, widget);\n\t\t\tif ( w.edit ){\n\t\t\t\tvar edit = {reload: true};\n\t\t\t\tangular.extend(edit, w.edit);\n\t\t\t\tw.edit = edit;\n\t\t\t}\n\t\t\twidgets[name] = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name ngm.dashboardProvider#widgetsPath\n\t\t * @methodOf ngm.dashboardProvider\n\t\t * @description\n\t\t *\n\t\t * Sets the path to the directory which contains the widgets. The widgets\n\t\t * path is used for widgets with a templateUrl which contains the\n\t\t * placeholder {widgetsPath}. The placeholder is replaced with the\n\t\t * configured value, before the template is loaded, but the template is\n\t\t * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n\t\t * The default value of widgetPaths is ''.\n\t\t *\n\t\t *\n\t\t * @param {string} path to the directory which contains the widgets\n\t\t *\n\t\t * @returns {Object} self\n\t\t */\n\t\tthis.widgetsPath = function(path){\n\t\t\twidgetsPath = path;\n\t\t\treturn this;\n\t\t};\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#structure\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Registers a new structure.\n\t\t*\n\t\t* @param {string} name of the structure\n\t\t* @param {object} structure to be registered.\n\t\t*\n\t\t*   Object properties:\n\t\t*\n\t\t*   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n\t\t*     - `styleClass` - `{string}` - CSS Class of the row.\n\t\t*     - `columns` - `{Array.<Object>}` - Columns of the row.\n\t\t*       - `styleClass` - `{string}` - CSS Class of the column.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.structure = function(name, structure){\n\t\t\tstructures[name] = structure;\n\t\t\treturn this;\n\t\t};\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#messageTemplate\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Changes the template for messages.\n\t\t*\n\t\t* @param {string} template for messages.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.messageTemplate = function(template){\n\t\t\tmessageTemplate = template;\n\t\t\treturn this;\n\t\t};\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#loadingTemplate\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Changes the template which is displayed as\n\t\t* long as the widget resources are not resolved.\n\t\t*\n\t\t* @param {string} loading template\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.loadingTemplate = function(template){\n\t\t\tloadingTemplate = template;\n\t\t\treturn this;\n\t\t};\n\t\t\n\t /**\n\t\t* @ngdoc service\n\t\t* @name ngm.dashboard\n\t\t* @description\n\t\t*\n\t\t* The dashboard holds all options, structures and widgets.\n\t\t*\n\t\t* @property {Array.<Object>} widgets Array of registered widgets.\n\t\t* @property {string} widgetsPath Default path for widgets.\n\t\t* @property {Array.<Object>} structures Array of registered structures.\n\t\t* @property {string} messageTemplate Template for messages.\n\t\t* @property {string} loadingTemplate Template for widget loading.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.$get = function(){\n\t\t\tvar cid = 0;\n\n\t\t\treturn {\n\t\t\t\twidgets: widgets,\n\t\t\t\twidgetsPath: widgetsPath,\n\t\t\t\tstructures: structures,\n\t\t\t\tmessageTemplate: messageTemplate,\n\t\t\t\tloadingTemplate: loadingTemplate,\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc method\n\t\t\t\t * @name ngm.dashboard#id\n\t\t\t\t * @methodOf ngm.dashboard\n\t\t\t\t * @description\n\t\t\t\t *\n\t\t\t\t * Creates an ongoing numeric id. The method is used to create ids for\n\t\t\t\t * columns and widgets in the dashboard.\n\t\t\t\t */\n\t\t\t\tid: function(){\n\t\t\t\t\treturn ++cid;\n\t\t\t\t}\n\n\t\t\t};\n\t\t};\n});\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Patrick Fitzgerald\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('ngm')\n  .directive('ngmDashboardRow', ['$compile', 'ngmTemplatePath', 'columnTemplate', function ($compile, ngmTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        ngmModel: '=',\n        editMode: '=',\n        options: '='\n      },\n      templateUrl: ngmTemplatePath + 'dashboard-row.html',\n      link: function ($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  }]);\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Patrick Fitzgerald\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('ngm')\n  .directive('ngmDashboardColumn', [ '$log', '$compile', 'ngmTemplatePath', 'rowTemplate', 'dashboard', function ($log, $compile, ngmTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (w.wid === index){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if ( c.cid === index ){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the ngm id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('ngm-id');\n      return id ? parseInt(id) : -1;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        ngmModel: '=',\n        options: '='\n      },\n      templateUrl: ngmTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    };\n  }]);\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('ngm')\n  .directive('ngmWidgetContent', [ '$log', '$q', '$sce', '$http', '$templateCache',\n    '$compile', '$controller', '$injector', 'dashboard', function($log, $q, $sce, $http, $templateCache,\n    $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url){\n      var parsedUrl = url;\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                       .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0){\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget){\n      var deferred = $q.defer();\n\n      if ( widget.template ){\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl){\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n            .then(function(response){\n              // put response to cache, with unmodified url as key\n              $templateCache.put(widget.templateUrl, response.data);\n              deferred.resolve(response.data);\n            })\n            .catch(function(){\n              deferred.reject('could not load template');\n            });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        $element: $element.parent(),\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs){\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope){\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetReload', function(){\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetConfigChanged', function(event, params){\n          // match update to widget using 'broadcast'\n          if ($scope.model.broadcast === params.broadcast){\n            // Extend widget config with params\n            $scope.model.config = angular.merge({}, $scope.model.config, params.config);\n            // Re-compile widget\n            currentScope = compileWidget($scope, $element, currentScope);\n          }\n        });\n      }\n    };\n\n  }]);\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('ngm')\n  .directive('ngmWidget', ['$log', 'dashboard', 'ngmTemplatePath', function($log, dashboard, ngmTemplatePath) {\n\n    function preLink($scope){\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n\n          // set id for sortable\n          if (!definition.wid){\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n         if(!$scope.widgetState){\n             $scope.widgetState ={};\n             $scope.widgetState.isCollapsed= false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind reload function\n        $scope.reload = function(){\n          $scope.$broadcast('widgetReload');\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: ngmTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n\n      controller: [ '$scope', function ($scope) {\n        //\n      }],\n\n      compile: function compile(){\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  }]);\n",null,"(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('ngm', ['ngm.provider'])\n  .value('ngmTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<ngm-dashboard-row row=\"row\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<ngm-dashboard-column column=\"column\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('ngmVersion', '0.4.2');\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name ngm.directive:ngmDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `ngmDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} ngmModel model object of the dashboard.\n * @param {function=} ngmWidgetFilter function to filter widgets on the add dialog.\n */\n\nangular.module('ngm')\n\t.service('ngmData', ['$q', '$http', function($q, $http){\n\t\treturn {\n\t\t\tget: function(request){\n\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t$http(request)\n\t\t\t\t\t.then(function(response){\n\t\t\t\t\t\tdeferred.resolve(response.data);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(function(response){\n\t\t\t\t\t\tdeferred.reject(response.data);\n\t\t\t\t\t});\n\n\t\t\t\treturn deferred.promise;\n\t\t\t}\n\t\t};\n\t}])\n\t.service('ngmDataSteam', ['$q', '$http', function($q, $http){\n\t\treturn {\n\t\t\tget: function(request){\n\t\t\t\tvar deferred = $q.defer();\n\t\t\t\trequest.responseType = 'arraybuffer';\n\t\t\t\t$http(request)\n\t\t\t\t\t.then(function onSuccess(response) {\n\t\t\t\t\t\tdeferred.resolve(response);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(function onError(err) {\n\t\t\t\t\t\tdeferred.reject(err);\n\t\t\t\t\t})\n\n\t\t\t\treturn deferred.promise;\n\t\t\t}\n\t\t};\n\t}])\n\t.directive('ngmDashboard', ['$rootScope', '$log', '$sce', 'dashboard', 'ngmTemplatePath', function ($rootScope, $log, $sce, dashboard, ngmTemplatePath) {\n\t\t\n\n\t\tfunction stringToBoolean(string){\n\t\t\tswitch(angular.isDefined(string) ? string.toLowerCase() : null){\n\t\t\t\tcase 'true': case 'yes': case '1': return true;\n\t\t\t\tcase 'false': case 'no': case '0': case null: return false;\n\t\t\t\tdefault: return Boolean(string);\n\t\t\t}\n\t\t}\n\n\t\tfunction copyWidgets(source, target) {\n\t\t\tif ( source.widgets && source.widgets.length > 0 ){\n\t\t\t\tvar w = source.widgets.shift();\n\t\t\t\twhile (w){\n\t\t\t\t\ttarget.widgets.push(w);\n\t\t\t\t\tw = source.widgets.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Copy widget from old columns to the new model\n\t\t* @param object root the model\n\t\t* @param array of columns\n\t\t* @param counter\n\t\t*/\n\t\tfunction fillStructure(root, columns, counter) {\n\t\t\tcounter = counter || 0;\n\n\t\t\tif (angular.isDefined(root.rows)) {\n\t\t\t\tangular.forEach(root.rows, function (row) {\n\t\t\t\t\tangular.forEach(row.columns, function (column) {\n\t\t\t\t\t\t// if the widgets prop doesn't exist, create a new array for it.\n\t\t\t\t\t\t// this allows ui.sortable to do it's thing without error\n\t\t\t\t\t\tif (!column.widgets) {\n\t\t\t\t\t\t\tcolumn.widgets = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if a column exist at the counter index, copy over the column\n\t\t\t\t\t\tif (angular.isDefined(columns[counter])) {\n\t\t\t\t\t\t\t// do not add widgets to a column, which uses nested rows\n\t\t\t\t\t\t\tif (!angular.isDefined(column.rows)){\n\t\t\t\t\t\t\t\tcopyWidgets(columns[counter], column);\n\t\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// run fillStructure again for any sub rows/columns\n\t\t\t\t\t\tcounter = fillStructure(column, columns, counter);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t\t/**\n\t\t* Read Columns: recursively searches an object for the 'columns' property\n\t\t* @param object model\n\t\t* @param array  an array of existing columns; used when recursion happens\n\t\t*/\n\t\tfunction readColumns(root, columns) {\n\t\t\tcolumns = columns || [];\n\n\t\t\tif (angular.isDefined(root.rows)) {\n\t\t\t\tangular.forEach(root.rows, function (row) {\n\t\t\t\t\tangular.forEach(row.columns, function (col) {\n\t\t\t\t\t\tcolumns.push(col);\n\t\t\t\t\t\t// keep reading columns until we can't any more\n\t\t\t\t\t\treadColumns(col, columns);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn columns;\n\t\t}\n\n\t\tfunction changeStructure(model, structure){\n\t\t\tvar columns = readColumns(model);\n\t\t\tvar counter = 0;\n\n\t\t\tmodel.rows = angular.copy(structure.rows);\n\n\t\t\twhile ( counter < columns.length ){\n\t\t\t\tcounter = fillStructure(model, columns, counter);\n\t\t\t}\n\t\t}\n\n\t\tfunction createConfiguration(type){\n\t\t\tvar cfg = {};\n\t\t\tvar config = dashboard.widgets[type].config;\n\t\t\tif (config){\n\t\t\t\tcfg = angular.copy(config);\n\t\t\t}\n\t\t\treturn cfg;\n\t\t}\n\n\t\t/**\n\t\t * Find first widget column in model.\n\t\t *\n\t\t * @param dashboard model\n\t\t */\n\t\tfunction findFirstWidgetColumn(model){\n\t\t\tvar column = null;\n\t\t\tif (!angular.isArray(model.rows)){\n\t\t\t\t$log.error('model does not have any rows');\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tfor (var i=0; i<model.rows.length; i++){\n\t\t\t\tvar row = model.rows[i];\n\t\t\t\tif (angular.isArray(row.columns)){\n\t\t\t\t\tfor (var j=0; j<row.columns.length; j++){\n\t\t\t\t\t\tvar col = row.columns[j];\n\t\t\t\t\t\tif (!col.rows){\n\t\t\t\t\t\t\tcolumn = col;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (column){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn column;\n\t\t}\n\n\t\treturn {\n\t\t\treplace: true,\n\t\t\trestrict: 'EA',\n\t\t\ttransclude : false,\n\t\t\tscope: {\n\t\t\t\tstructure: '@',\n\t\t\t\tname: '@',\n\t\t\t\tcollapsible: '@',\n\t\t\t\teditable: '@',\n\t\t\t\tmaximizable: '@',\n\t\t\t\tngmModel: '=',\n\t\t\t\tngmWidgetFilter: '='\n\t\t\t},\n\t\t\tcontroller: ['$scope', function($scope){\n\t\t\t\tvar model = {};\n\t\t\t\tvar structure = {};\n\t\t\t\tvar widgetFilter = null;\n\t\t\t\tvar structureName = {};\n\t\t\t\tvar name = $scope.name;\n\n\t\t\t\t// Update widget configs with broadcast\n\t\t\t\t// if($scope.ngmModel){\n\t\t\t\t// \t$scope.ngmModel.updateWidgets = function(params){\n\t\t\t\t// \t\t$scope.$broadcast( 'widgetConfigChanged', params );\n\t\t\t\t// \t}\n\t\t\t\t// }\n\n\t\t\t\t// Watching for changes on ngmModel\n\t\t\t\t$scope.$watch('ngmModel', function(oldVal, newVal) {\n\t\t\t\t\t// has model changed or is the model attribute not set\n\t\t\t\t\tif (newVal !== null || (oldVal === null && newVal === null)) {\n\t\t\t\t\t\tmodel = $scope.ngmModel;\n\t\t\t\t\t\twidgetFilter = $scope.ngmWidgetFilter;\n\t\t\t\t\t\tif ( ! model || ! model.rows ){\n\t\t\t\t\t\t\tstructureName = $scope.structure;\n\t\t\t\t\t\t\tstructure = dashboard.structures[structureName];\n\t\t\t\t\t\t\tif (structure){\n\t\t\t\t\t\t\t\tif (model){\n\t\t\t\t\t\t\t\t\tmodel.rows = angular.copy(structure).rows;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tmodel = angular.copy(structure);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmodel.structure = structureName;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$log.error( 'could not find structure ' + structureName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (model) {\n\t\t\t\t\t\t\tif (!model.title){\n\t\t\t\t\t\t\t\tmodel.title = 'Dashboard';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!model.titleTemplateUrl) {\n\t\t\t\t\t\t\t\tmodel.titleTemplateUrl = ngmTemplatePath + 'dashboard-title.html';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$scope.model = model;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$log.error('could not find or create model');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, true);\n\n\t\t\t\t// edit mode\n\t\t\t\t$scope.editMode = false;\n\t\t\t\t$scope.editClass = '';\n\n\t\t\t}],\n\t\t\tlink: function ($scope, $element, $attr) {\n\t\t\t\t// pass options to scope\n\t\t\t\tvar options = {\n\t\t\t\t\tname: $attr.name,\n\t\t\t\t\teditable: true,\n\t\t\t\t\tmaximizable: stringToBoolean($attr.maximizable),\n\t\t\t\t\tcollapsible: stringToBoolean($attr.collapsible)\n\t\t\t\t};\n\t\t\t\tif (angular.isDefined($attr.editable)){\n\t\t\t\t\toptions.editable = stringToBoolean($attr.editable);\n\t\t\t\t}\n\t\t\t\t$scope.options = options;\n\t\t\t},\n\t\t\ttemplateUrl: ngmTemplatePath + 'dashboard.html'\n\t\t};\n\t}])\n\t// toggles accordian classes for\n\t.directive('ngmMenu', function() {\n\n\t\treturn {\n\n\t\t\t// Restrict it to be an attribute in this case\n\t\t\trestrict: 'A',\n\n\t\t\t// responsible for registering DOM listeners as well as updating the DOM\n\t\t\tlink: function(scope, el, attr) {\n\n\t\t\t\t// set initial menu style - has to be a better way?\n\t\t\t\tsetTimeout(function(){\n\n\t\t\t\t\t// For all itmes\n\t\t\t\t\t$('.side-menu').find('li').each(function(i, d) {\n\n\t\t\t\t\t\t// find the row that is active\n\t\t\t\t\t\tif ($(d).attr('class').search('active') > 0) {\n\n\t\t\t\t\t\t\t// set list header\n\t\t\t\t\t\t\t$(d).closest('.bold').attr('class', 'bold active');\n\n\t\t\t\t\t\t\t// set z-depth-1\n\t\t\t\t\t\t\t$(d).closest('.bold').find('a').attr('class',\n\t\t\t\t\t\t\t\t\t$(d).closest('.bold').find('a').attr('class') + ' z-depth-1' );\n\n\t\t\t\t\t\t\t// slide down list\n\t\t\t\t\t\t\t$(d).closest('.collapsible-body').slideDown();\n\t\t\t\t\t\t\t$(d).closest('.collapsible-body').attr('class',\n\t\t\t\t\t\t\t\t$(d).closest('.collapsible-body').attr('class') + ' active');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t}, 0);\n\n\t\t\t\t// on element click\n\t\t\t\tel.bind( 'click', function( $event ) {\n\n\t\t\t\t\t// toggle list\n\t\t\t\t\tel.toggleClass('active');\n\t\t\t\t\t// toggle list\n\t\t\t\t\tel.find('.collapsible-header').toggleClass('z-depth-1');\n\n\t\t\t\t\t// toggle list rows active\n\t\t\t\t\tel.find('.collapsible-body').toggleClass('active');\n\n\t\t\t\t\t// toggle list rows animation\n\t\t\t\t\tif (el.find('.collapsible-body').hasClass('active')) {\n\t\t\t\t\t\tel.find('.collapsible-body').slideDown();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tel.find('.collapsible-body').slideUp();\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t})\n\t.directive('ngmDashboardDownload', [ '$timeout', 'dashboard', 'ngmData', 'ngmDataSteam',  function( $timeout, dashboard, ngmData, ngmDataSteam ) {\n\n\t\t// client side download\n\t\tvar download = {\n\n\t\t\t// prepare and stream CSV to client\n\t\t\t'csv': function(request){\n\t\t\t\t// get data\n\t\t\t\tngmData.get(request)\n\t\t\t\t\t//\n\t\t\t\t\t.then(function(csv){\n\n\t\t\t\t\t\t// save as blob\n\t\t\t\t\t\tvar csvData = new Blob([ csv.data ], { type: 'text/csv' });\n\t\t\t\t\t\tvar csvUrl = URL.createObjectURL( csvData );\n\n\t\t\t\t\t\tvar el = document.createElement('a');\n\t\t\t\t\t\t\tel.href =  csvUrl;\n\t\t\t\t\t\t\tel.target = '_blank';\n\t\t\t\t\t\t\tel.download = request.data.report + '.csv';\n\n\t\t\t\t\t\t// append, download & remove\n\t\t\t\t\t\tdocument.body.appendChild(el);\n\t\t\t\t\t\tel.click();\n\t\t\t\t\t\tel.remove();\n\n\t\t\t\t\t\t// close loading mask\n\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\n\t\t\t\t\t},function(data){\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\t\t// error msg\n\t\t\t\t\t\tM.toast(data.error, 4000);\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\t// prepare and stream XLSX to client\n\t\t\t'xlsx': function(request){\n\t\t\t\t// get data\n\t\t\t\tngmDataSteam.get(request)\n\t\t\t\t\t.then(function(response){\n\n\t\t\t\t\t\tvar filename = \"\";\n\t\t\t\t\t\tvar disposition = response.headers('Content-Disposition');\n\t\t\t\t\t\tvar contentType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n\t\t\t\t\t\t// var contentType = xlsx.headers('Content-Type');\n\n\t\t\t\t\t\tif (disposition && disposition.indexOf('attachment') !== -1) {\n\t\t\t\t\t\t\t\tvar filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n\t\t\t\t\t\t\t\tvar matches = filenameRegex.exec(disposition);\n\t\t\t\t\t\t\t\tif (matches != null && matches[1]) filename = matches[1].replace(/['\"]/g, '');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// save as blob\n\t\t\t\t\t\tvar xlsxData = new Blob([ response.data ], { type: contentType });\n\t\t\t\t\t\tvar xlsxUrl = URL.createObjectURL( xlsxData );\n\n\t\t\t\t\t\tvar el = document.createElement('a');\n\t\t\t\t\t\t\tel.href =  xlsxUrl;\n\n\t\t\t\t\t\tif (request.data) {\n\t\t\t\t\t\t\tfilename = request.data.report ? request.data.report + '.xlsx' : filename;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (request.params) {\n\t\t\t\t\t\t\tfilename = request.params.report ? request.params.report + '.xlsx' : filename;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tel.download = filename\n\n\t\t\t\t\t\t// append, download & remove\n\t\t\t\t\t\tdocument.body.appendChild(el);\n\t\t\t\t\t\tel.click();\n\t\t\t\t\t\tel.remove();\n\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\n\t\t\t\t\t},function(data){\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\t\t// error msg\n\t\t\t\t\t\tM.toast({ html: data.statusText, displayLength: 4000 });\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\t// client side PDF generation\n\t\t\t'pdf': function(request){\n\n\t\t\t\t// get width on runtime if no defined\n\t\t\t\tif (!request.data.viewportWidth) {\n\t\t\t\t\trequest.data.viewportWidth = $(window).width();\n\t\t\t\t}\n\t\t\t\t// get height on runtime if no defined\n\t\t\t\tif (!request.data.viewportHeight) {\n\t\t\t\t\trequest.data.viewportHeight = $(document).height();\n\t\t\t\t}\n\t\t\t\t// get data\n\t\t\t\tngmData.get(request)\n\t\t\t\t\t//\n\t\t\t\t\t.then(function(response){\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\t\t// open in new tab\n\t\t\t\t\t\twindow.open(request.data.downloadUrl + response.report, '_blank');\n\t\t\t\t\t},function(data){\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\t\t// error msg\n\t\t\t\t\t\tM.toast(data.error, 4000);\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\t// download zip archive from link\n\t\t\t'zip': function(request){\n\t\t\t\t// get data\n\t\t\t\tngmData.get(request)\n\t\t\t\t\t.then(function(response){\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\t\t// open in new tab\n\t\t\t\t\t\tresponse.download_url ? window.open(response.download_url, '_blank') : M.toast(response.message, 4000);\n\t\t\t\t\t},function(err){\n\t\t\t\t\t\t// close loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\t\t// error msg\n\t\t\t\t\t\tM.toast(err.error.message, 4000);\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\t// download client side\n\t\t\t'client': function(request){\n\t\t\t\trequest.function().then(function (data) {\n\t\t\t\t\tvar blob = new Blob([data], { type: request.mimetype ? request.mimetype : \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" });\n\t\t\t\t\tvar fUrl = URL.createObjectURL( blob );\n\t\t\t\t\tvar el = document.createElement('a');\n\t\t\t\t\tel.href =  fUrl;\n\t\t\t\t\tel.download = request.filename ? request.filename : 'Data';\n\t\t\t\t\t// append, download & remove\n\t\t\t\t\tdocument.body.appendChild(el);\n\t\t\t\t\tel.click();\n\t\t\t\t\tel.remove();\n\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t}, function () {\n\t\t\t\t\t$('#ngm-loading-modal').modal('close');\n\t\t\t\t\tM.toast({ html: 'Download Error!', displayLength: 4000 });\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t// writes metrics to rest api\n\t\t\t'setMetrics': function(request){\n\t\t\t\tngmData.get(request)\n\t\t\t\t\t.then(function(data){\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\t// element or attrbute\n\t\t\trestrict: 'EA',\n\n\t\t\treplace: true,\n\n\t\t\ttemplate: '<li><a id=\"{{ type + icon }}\" class=\"btn-floating {{ color }} z-depth-2 tooltipped\" data-position=\"bottom\" data-tooltip=\"{{ hover }}\" data-delay=\"50\"><i class=\"material-icons\">{{ icon }}</i></a></li>',\n\n\t\t\tscope: {\n\t\t\t\ttype: '=',\n\t\t\t\ticon: '=',\n\t\t\t\tcolor: '=',\n\t\t\t\thover: '=',\n\t\t\t\turl: '=',\n\t\t\t\trequest: '=',\n\t\t\t\tmetrics: '='\n\t\t\t},\n\n\t\t\t// onclick\n\t\t\tlink: function(scope, el, attr) {\n\n\t\t\t\t// set defaults\n\t\t\t\tscope.type = scope.type ? scope.type : 'csv';\n\t\t\t\tscope.icon = scope.icon ? scope.icon : 'cloud_download';\n\t\t\t\tscope.color = scope.color ? scope.color : 'blue';\n\t\t\t\tscope.hover = scope.hover ? scope.hover : 'Download ' + scope.type.toUpperCase();\n\n\t\t\t\t// init tooltip\n\t\t\t\t$timeout(function(){\n\t\t\t\t\t$('#' + scope.type + scope.icon ).tooltip();\n\t\t\t\t}, 0);\n\n\t\t\t\t// bind download event\n\t\t\t\tel.bind( 'click', function($e) {\n\n\t\t\t\t\t// if simple download url exists\n\t\t\t\t\tif(scope.url){\n\n\t\t\t\t\t\twindow.open(scope.url, '_blank');\n\n\t\t\t\t\t// else download process\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// open loading mask\n\t\t\t\t\t\t$('#ngm-loading-modal').modal({ dismissible: false });\n\t\t\t\t\t\t$('#ngm-loading-modal').modal('open');\n\n\t\t\t\t\t\t// prepare download\n\t\t\t\t\t\tdownload[scope.type](scope.request);\n\n\t\t\t\t\t\t// record metrics\n\t\t\t\t\t\tif (scope.metrics) {\n\t\t\t\t\t\t\tdownload.setMetrics(scope.metrics);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t}\n\t\t}\n\t}])\n\t.directive(\"ngModel\", [\"$timeout\", function($timeout){\n\t\treturn {\n\t\t\trestrict: 'A',\n\t\t\tpriority: -1, // lower priority than built-in ng-model so it runs first\n\t\t\tlink: function(scope, element, attr) {\n\t\t\t\tscope.$watch(attr.ngModel,function(value){\n\t\t\t\t\t$timeout(function () {\n\t\t\t\t\t\tif (value){\n\t\t\t\t\t\t\t\telement.trigger(\"change\");\n\t\t\t\t\t\t} else if(element.attr('placeholder') === undefined) {\n\t\t\t\t\t\t\tif(!element.is(\":focus\")) {\n\t\t\t\t\t\t\t\telement.trigger(\"blur\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}])\n  /**\n   * Add pickadate directive\n   * Type text is mandatory\n   * Source: https://github.com/krescruz/angular-materialize/\n   * Example:\n   <input ngm-date\n      type=\"text\"\n      name=\"created\"\n      id=\"inputCreated\"\n      ng-model=\"currentTime\"\n      format=\"dd/mm/yyyy\"\n      months-full=\"{{ monthFr }}\"\n      months-short=\"{{ monthShortFr }}\"\n      weekdays-full=\"{{ weekdaysFullFr }}\"\n      weekdays-short=\"{{ weekdaysShortFr }}\"\n      weekdays-letter=\"{{ weekdaysLetterFr }}\"\n      disable=\"disable\"\n      today=\"today\"\n      clear=\"clear\"\n      close=\"close\"\n      on-start=\"onStart()\"\n      on-render=\"onRender()\"\n      on-open=\"onOpen()\"\n      on-close=\"onClose()\"\n      on-set=\"onSet()\"\n      on-stop=\"onStop()\" />\n   */\n  .directive('ngmDate', [\"$compile\", \"$timeout\", function ($compile, $timeout) {\n      // Fix for issue 46. This gotta be a bug in the materialize code, but this fixes it.\n      var style = $('<style>#inputCreated_root {outline: none;}</style>');\n      $('html > head').append(style);\n\n      // Define Prototype Date format\n      // Use like this\n      // today = new Date();\n      // var dateString = today.format(\"dd-m-yy\");\n      var dateFormat = function () {\n\n          var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n              timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n              timezoneClip = /[^-+\\dA-Z]/g,\n              pad = function (val, len) {\n                  val = String(val);\n                  len = len || 2;\n                  while (val.length < len) {\n                      val = \"0\" + val;\n                  }\n                  return val;\n              };\n\n          // Regexes and supporting functions are cached through closure\n          return function (date, mask, utc) {\n\n              var dF = dateFormat;\n\n              // You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n              if (arguments.length === 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\n                  mask = date;\n                  date = undefined;\n              }\n\n              // Passing date through Date applies Date.parse, if necessary\n              date = date ? new Date(date) : new Date();\n              if (isNaN(date)) throw SyntaxError(\"invalid date\");\n\n              // force UTC\n              date = new Date( date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0 );\n\n              // mask?\n              mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\n\n              // Allow setting the utc argument via the mask\n              if (mask.slice(0, 4) == \"UTC:\") {\n                  mask = mask.slice(4);\n                  utc = true;\n              }\n\n              var _ = utc ? \"getUTC\" : \"get\",\n                  d = date[ _ + \"Date\" ](),\n                  D = date[ _ + \"Day\" ](),\n                  m = date[ _ + \"Month\" ](),\n                  y = date[ _ + \"FullYear\" ](),\n                  H = date[ _ + \"Hours\" ](),\n                  M = date[ _ + \"Minutes\" ](),\n                  s = date[ _ + \"Seconds\" ](),\n                  L = date[ _ + \"Milliseconds\" ](),\n                  o = utc ? 0 : date.getTimezoneOffset(),\n                  flags = {\n                      d:    d,\n                      dd:   pad(d),\n                      ddd:  dF.i18n.dayNames[D],\n                      dddd: dF.i18n.dayNames[D + 7],\n                      m:    m + 1,\n                      mm:   pad(m + 1),\n                      mmm:  dF.i18n.monthNames[m],\n                      mmmm: dF.i18n.monthNames[m + 12],\n                      yy:   String(y).slice(2),\n                      yyyy: y,\n                      h:    H % 12 || 12,\n                      hh:   pad(H % 12 || 12),\n                      H:    H,\n                      HH:   pad(H),\n                      M:    M,\n                      MM:   pad(M),\n                      s:    s,\n                      ss:   pad(s),\n                      l:    pad(L, 3),\n                      L:    pad(L > 99 ? Math.round(L / 10) : L),\n                      t:    H < 12 ? \"a\"  : \"p\",\n                      tt:   H < 12 ? \"am\" : \"pm\",\n                      T:    H < 12 ? \"A\"  : \"P\",\n                      TT:   H < 12 ? \"AM\" : \"PM\",\n                      Z:    utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\n                      o:    (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n                      S:    [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n                  };\n\n              return mask.replace(token, function ($0) {\n                  return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n              });\n          };\n      }();\n\n      // Some common format strings\n      dateFormat.masks = {\n         \"default\":      \"ddd mmm dd yyyy HH:MM:ss\",\n          shortDate:      \"m/d/yy\",\n          mediumDate:     \"mmm d, yyyy\",\n          longDate:       \"mmmm d, yyyy\",\n          fullDate:       \"dddd, mmmm d, yyyy\",\n          shortTime:      \"h:MM TT\",\n          mediumTime:     \"h:MM:ss TT\",\n          longTime:       \"h:MM:ss TT Z\",\n          isoDate:        \"yyyy-mm-dd\",\n          isoTime:        \"HH:MM:ss\",\n          isoDateTime:    \"yyyy-mm-dd'T'HH:MM:ss\",\n          isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\n      };\n\n      // Internationalization strings\n      dateFormat.i18n = {\n          dayNames: [\n              \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\n              \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n          ],\n          monthNames: [\n              \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n              \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n          ]\n      };\n\n      // For convenience...\n      Date.prototype.format = function (mask, utc) {\n          return dateFormat(this, mask, utc);\n      };\n\n      /**\n       * Validate date object\n       * @param  {Date}  date\n       * @return {Boolean}\n       */\n      var isValidDate = function(date) {\n          if( Object.prototype.toString.call(date) === '[object Date]' ) {\n              return !isNaN(date.getTime());\n          }\n          return false;\n      };\n\n      return {\n          require: 'ngModel',\n          scope: {\n              container: \"@\",\n              format: \"@\",\n              formatSubmit: \"@\",\n              monthsFull: \"@\",\n              monthsShort: \"@\",\n              weekdaysFull: \"@\",\n              weekdaysShort: \"@\",\n              weekdaysLetter: \"@\",\n              firstDay: \"=\",\n              disable: \"=\",\n              today: \"=\",\n              clear: \"=\",\n              close: \"=\",\n              selectYears: \"=\",\n              onStart: \"&\",\n              onRender: \"&\",\n              onOpen: \"&\",\n              onClose: \"&\",\n              onSet: \"&\",\n              onStop: \"&\",\n              ngReadonly: \"=?\",\n              max: \"@\",\n              min: \"@\"\n          },\n          link: function (scope, element, attrs, ngModelCtrl) {\n\n              ngModelCtrl.$formatters.unshift(function (modelValue) {\n                  if (modelValue) {\n                      var date = new Date(modelValue);\n                      return (angular.isDefined(scope.format)) ? date.format(scope.format) : date.format('d mmmm, yyyy');\n                  }\n                  return null;\n              });\n\n              var monthsFull = (angular.isDefined(scope.monthsFull)) ? scope.$eval(scope.monthsFull) : undefined,\n                  monthsShort = (angular.isDefined(scope.monthsShort)) ? scope.$eval(scope.monthsShort) : undefined,\n                  weekdaysFull = (angular.isDefined(scope.weekdaysFull)) ? scope.$eval(scope.weekdaysFull) : undefined,\n                  weekdaysShort = (angular.isDefined(scope.weekdaysShort)) ? scope.$eval(scope.weekdaysShort) : undefined,\n                  weekdaysLetter = (angular.isDefined(scope.weekdaysLetter)) ? scope.$eval(scope.weekdaysLetter) : undefined;\n\n\n              $compile(element.contents())(scope);\n              if (!(scope.ngReadonly)) {\n                  $timeout(function () {\n                      var options = {\n                          container : scope.container,\n                          format: (angular.isDefined(scope.format)) ? scope.format : undefined,\n                          formatSubmit: (angular.isDefined(scope.formatSubmit)) ? scope.formatSubmit : undefined,\n                          monthsFull: (angular.isDefined(monthsFull)) ? monthsFull : undefined,\n                          monthsShort: (angular.isDefined(monthsShort)) ? monthsShort : undefined,\n                          weekdaysFull: (angular.isDefined(weekdaysFull)) ? weekdaysFull : undefined,\n                          weekdaysShort: (angular.isDefined(weekdaysShort)) ? weekdaysShort : undefined,\n                          weekdaysLetter: (angular.isDefined(weekdaysLetter)) ? weekdaysLetter : undefined,\n                          firstDay: (angular.isDefined(scope.firstDay)) ? scope.firstDay : 0,\n                          disable: (angular.isDefined(scope.disable)) ? scope.disable : undefined,\n                          today: (angular.isDefined(scope.today)) ? scope.today : undefined,\n                          clear: (angular.isDefined(scope.clear)) ? scope.clear : undefined,\n                          close: (angular.isDefined(scope.close)) ? scope.close : undefined,\n                          selectYears: (angular.isDefined(scope.selectYears)) ? scope.selectYears : undefined,\n                          onStart: (angular.isDefined(scope.onStart)) ? function(){ scope.onStart(); } : undefined,\n                          onRender: (angular.isDefined(scope.onRender)) ? function(){ scope.onRender(); } : undefined,\n                          onOpen: (angular.isDefined(scope.onOpen)) ? function(){ scope.onOpen(); } : undefined,\n                          onClose: (angular.isDefined(scope.onClose)) ? function(){ scope.onClose(); } : undefined,\n                          // onSet: (angular.isDefined(scope.onSet)) ? function(event){ if(event.select) { var picker = this; setTimeout(function(){ picker.close(); }, 0, picker); } } : undefined,\n                          onSet: (angular.isDefined(scope.onSet)) ? function(event){ if(event.select) { this.close(); } } : undefined,\n                          onStop: (angular.isDefined(scope.onStop)) ? function(){ scope.onStop(); } : undefined\n                      };\n                      if (!scope.container) {\n                          delete options.container;\n                      }\n\t\t\t\t\t//   var pickadateInput = element.pickadate(options);\n\t\t\t\t\t  var instance = M.Datepicker.init(element, options);\n                      //pickadate API\n\t\t\t\t\t//   var picker = pickadateInput.pickadate('picker');\n\t\t\t\t\t  var picker = M.Datepicker.getInstance(element);\n\t\t\t\t\t  picker.setDate(element[0].value)\n\t\t\t\t\t  picker.options.setDefaultDate = true;\n\n                      //watcher of min, max, and disabled dates\n                      scope.$watch('max', function(newMax) {\n                          if( picker ) {\n                              var maxDate = new Date(newMax);\n\t\t\t\t\t\t\t//   picker.set({max: isValidDate(maxDate) ? maxDate : false});\n\t\t\t\t\t\t\t  picker.options.maxDate = isValidDate(maxDate) ? maxDate : false;\n                          }\n                      });\n                      scope.$watch('min', function(newMin) {\n                          if( picker ) {\n                              var minDate = new Date(newMin);\n\t\t\t\t\t\t\t//   picker.set({min: isValidDate(minDate) ? minDate : false});\n\t\t\t\t\t\t\t  picker.options.minDate = isValidDate(minDate) ? minDate : false;\n                          }\n                      });\n                      scope.$watch('disable', function(newDisabled) {\n                          if( picker ) {\n                              var disabledDates = angular.isDefined(newDisabled) && angular.isArray(newDisabled) ? newDisabled : false;\n\t\t\t\t\t\t\t//   picker.set({disable: disabledDates});\n\t\t\t\t\t\t\t  picker.options.disableDayFn = disabledDates;\n                          }\n                      });\n                  });\n              }\n          }\n      };\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name ngm.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('ngm.provider', [])\n\t.provider('dashboard', function(){\n\n\t\tvar widgets = {};\n\t\tvar widgetsPath = '';\n\t\tvar structures = {};\n\t\tvar messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n\t\tvar loadingTemplate = '\\\n\t\t\t<div class=\"progress progress-striped active\">\\n\\\n\t\t\t\t<div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n\t\t\t\t\t<span class=\"sr-only\">loading ...</span>\\n\\\n\t\t\t\t</div>\\n\\\n\t\t\t</div>';\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#widget\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Registers a new widget.\n\t\t*\n\t\t* @param {string} name of the widget\n\t\t* @param {object} widget to be registered.\n\t\t*\n\t\t*   Object properties:\n\t\t*\n\t\t*   - `title` - `{string=}` - The title of the widget.\n\t\t*   - `description` - `{string=}` - Description of the widget.\n\t\t*   - `config` - `{object}` - Predefined widget configuration.\n\t\t*   - `controller` - `{string=|function()=}` - Controller fn that should be\n\t\t*      associated with newly created scope of the widget or the name of a\n\t\t*      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n\t\t*      if passed as a string.\n\t\t*   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n\t\t*      published to scope under the `controllerAs` name.\n\t\t*   - `template` - `{string=|function()=}` - html template as a string.\n\t\t*   - `templateUrl` - `{string=}` - path to an html template.\n\t\t*   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n\t\t*   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n\t\t*      be injected into the controller. If any of these dependencies are promises, the widget\n\t\t*      will wait for them all to be resolved or one to be rejected before the controller is\n\t\t*      instantiated.\n\t\t*      If all the promises are resolved successfully, the values of the resolved promises are\n\t\t*      injected.\n\t\t*\n\t\t*      The map object is:\n\t\t*      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n\t\t*      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n\t\t*        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n\t\t*        and the return value is treated as the dependency. If the result is a promise, it is\n\t\t*        resolved before its value is injected into the controller.\n\t\t*   - `edit` - `{object}` - Edit modus of the widget.\n\t\t*      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n\t\t*      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n\t\t*        Default is true.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.widget = function(name, widget){\n\t\t\tvar w = angular.extend({reload: false}, widget);\n\t\t\tif ( w.edit ){\n\t\t\t\tvar edit = {reload: true};\n\t\t\t\tangular.extend(edit, w.edit);\n\t\t\t\tw.edit = edit;\n\t\t\t}\n\t\t\twidgets[name] = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name ngm.dashboardProvider#widgetsPath\n\t\t * @methodOf ngm.dashboardProvider\n\t\t * @description\n\t\t *\n\t\t * Sets the path to the directory which contains the widgets. The widgets\n\t\t * path is used for widgets with a templateUrl which contains the\n\t\t * placeholder {widgetsPath}. The placeholder is replaced with the\n\t\t * configured value, before the template is loaded, but the template is\n\t\t * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n\t\t * The default value of widgetPaths is ''.\n\t\t *\n\t\t *\n\t\t * @param {string} path to the directory which contains the widgets\n\t\t *\n\t\t * @returns {Object} self\n\t\t */\n\t\tthis.widgetsPath = function(path){\n\t\t\twidgetsPath = path;\n\t\t\treturn this;\n\t\t};\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#structure\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Registers a new structure.\n\t\t*\n\t\t* @param {string} name of the structure\n\t\t* @param {object} structure to be registered.\n\t\t*\n\t\t*   Object properties:\n\t\t*\n\t\t*   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n\t\t*     - `styleClass` - `{string}` - CSS Class of the row.\n\t\t*     - `columns` - `{Array.<Object>}` - Columns of the row.\n\t\t*       - `styleClass` - `{string}` - CSS Class of the column.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.structure = function(name, structure){\n\t\t\tstructures[name] = structure;\n\t\t\treturn this;\n\t\t};\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#messageTemplate\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Changes the template for messages.\n\t\t*\n\t\t* @param {string} template for messages.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.messageTemplate = function(template){\n\t\t\tmessageTemplate = template;\n\t\t\treturn this;\n\t\t};\n\n\t /**\n\t\t* @ngdoc method\n\t\t* @name ngm.dashboardProvider#loadingTemplate\n\t\t* @methodOf ngm.dashboardProvider\n\t\t* @description\n\t\t*\n\t\t* Changes the template which is displayed as\n\t\t* long as the widget resources are not resolved.\n\t\t*\n\t\t* @param {string} loading template\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.loadingTemplate = function(template){\n\t\t\tloadingTemplate = template;\n\t\t\treturn this;\n\t\t};\n\t\t\n\t /**\n\t\t* @ngdoc service\n\t\t* @name ngm.dashboard\n\t\t* @description\n\t\t*\n\t\t* The dashboard holds all options, structures and widgets.\n\t\t*\n\t\t* @property {Array.<Object>} widgets Array of registered widgets.\n\t\t* @property {string} widgetsPath Default path for widgets.\n\t\t* @property {Array.<Object>} structures Array of registered structures.\n\t\t* @property {string} messageTemplate Template for messages.\n\t\t* @property {string} loadingTemplate Template for widget loading.\n\t\t*\n\t\t* @returns {Object} self\n\t\t*/\n\t\tthis.$get = function(){\n\t\t\tvar cid = 0;\n\n\t\t\treturn {\n\t\t\t\twidgets: widgets,\n\t\t\t\twidgetsPath: widgetsPath,\n\t\t\t\tstructures: structures,\n\t\t\t\tmessageTemplate: messageTemplate,\n\t\t\t\tloadingTemplate: loadingTemplate,\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc method\n\t\t\t\t * @name ngm.dashboard#id\n\t\t\t\t * @methodOf ngm.dashboard\n\t\t\t\t * @description\n\t\t\t\t *\n\t\t\t\t * Creates an ongoing numeric id. The method is used to create ids for\n\t\t\t\t * columns and widgets in the dashboard.\n\t\t\t\t */\n\t\t\t\tid: function(){\n\t\t\t\t\treturn ++cid;\n\t\t\t\t}\n\n\t\t\t};\n\t\t};\n});\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Patrick Fitzgerald\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('ngm')\n  .directive('ngmDashboardRow', ['$compile', 'ngmTemplatePath', 'columnTemplate', function ($compile, ngmTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        ngmModel: '=',\n        editMode: '=',\n        options: '='\n      },\n      templateUrl: ngmTemplatePath + 'dashboard-row.html',\n      link: function ($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  }]);\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Patrick Fitzgerald\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('ngm')\n  .directive('ngmDashboardColumn', [ '$log', '$compile', 'ngmTemplatePath', 'rowTemplate', 'dashboard', function ($log, $compile, ngmTemplatePath, rowTemplate, dashboard) {\n    \n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (w.wid === index){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if ( c.cid === index ){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the ngm id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('ngm-id');\n      return id ? parseInt(id) : -1;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        ngmModel: '=',\n        options: '='\n      },\n      templateUrl: ngmTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    };\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('ngm')\n  .directive('ngmWidgetContent', [ '$log', '$q', '$sce', '$http', '$templateCache',\n    '$compile', '$controller', '$injector', 'dashboard', function($log, $q, $sce, $http, $templateCache,\n    $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url){\n      var parsedUrl = url;\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                       .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0){\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget){\n      var deferred = $q.defer();\n\n      if ( widget.template ){\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl){\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n            .then(function(response){\n              // put response to cache, with unmodified url as key\n              $templateCache.put(widget.templateUrl, response.data);\n              deferred.resolve(response.data);\n            })\n            .catch(function(){\n              deferred.reject('could not load template');\n            });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        $element: $element.parent(),\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs){\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope){\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetReload', function(){\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetConfigChanged', function(event, params){\n          // match update to widget using 'broadcast'\n          if ($scope.model.broadcast === params.broadcast){\n            // Extend widget config with params\n            $scope.model.config = angular.merge({}, $scope.model.config, params.config);\n            // Re-compile widget\n            currentScope = compileWidget($scope, $element, currentScope);\n          }\n        });\n      }\n    };\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('ngm')\n  .directive('ngmWidget', ['$log', 'dashboard', 'ngmTemplatePath', function($log, dashboard, ngmTemplatePath) {\n\n    function preLink($scope){\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n\n          // set id for sortable\n          if (!definition.wid){\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n         if(!$scope.widgetState){\n             $scope.widgetState ={};\n             $scope.widgetState.isCollapsed= false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind reload function\n        $scope.reload = function(){\n          $scope.$broadcast('widgetReload');\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: ngmTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n\n      controller: [ '$scope', function ($scope) {\n        //\n      }],\n\n      compile: function compile(){\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  }]);\n\nangular.module(\"ngm\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div ngm-id={{column.cid}} class=\\\"col {{column.styleClass}}\\\" ng-class=column.styleClass ng-model=column.widgets> <ngm-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column options=options widget-state=widgetState>  </ngm-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\" <div class=\\\"{{ model.header.div.class }}\\\" style=\\\"{{ model.header.div.style }}\\\">  <div class=row>  <h2 id=ngm-report-title class=\\\"{{ model.header.title.class }}\\\" style=\\\"{{ model.header.title.style }}\\\" ng-bind-html=model.header.title.title> </h2>  <div id=ngm-report-download class=\\\"{{ model.header.download.class }}\\\" style=\\\"{{ model.header.download.style }}\\\" align=right ng-if=model.header.download> <div class=\\\"fixed-action-btn horizontal\\\" style=\\\"position: relative; display: inline-block; margin-top:66px;\\\"> <a class=\\\"btn-floating btn-large {{ model.header.download.btnColor }} z-depth-2\\\"> <i class=\\\"large material-icons\\\">cloud_download</i> </a> <ul>  <div>  <ngm-dashboard-download ng-repeat=\\\"data in model.header.download.downloads track by $index\\\" type=data.type color=data.color icon=data.icon hover=data.hover filename=data.filename url=data.url request=data.request metrics=data.metrics> </ngm-dashboard-download> </div> </ul> </div> </div> </div>  <div class=row>  <p id=ngm-report-subtitle class=\\\"{{ model.header.subtitle.class }}\\\" style=\\\"{{ model.header.subtitle.style }}\\\" ng-bind-html=model.header.subtitle.title> </p>  <div id=ngm-report-datepicker class=\\\"{{ model.header.datePicker.class }}\\\" style=\\\"{{ model.header.datePicker.style }}\\\"> <div ng-repeat=\\\"date in model.header.datePicker.dates track by $index\\\">  <div id=\\\"ngmDateContainer-{{ $index }}\\\" class=ngm-date style=\\\"{{ date.style }}\\\"> <label for=\\\"ngmDateLabel-{{ $index }}\\\">{{ date.label }}</label> <input ngm-date id=\\\"ngmDatePicker-{{ $index }}\\\" type=text name=\\\"{{ date.name }}\\\" ng-model=date.currentTime format=\\\"{{ date.format }}\\\" min=\\\"{{ date.min }}\\\" max=\\\"{{ date.max }}\\\" on-close=date.onClose()> </div> </div> </div> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard> <ngm-dashboard-row row=row ngm-model=model options=options ng-repeat=\\\"row in model.rows\\\"> </ngm-dashboard-row> </div> </div> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div ngm-id=\\\"{{ definition.wid }}\\\" ngm-widget-type=\\\"{{ definition.type }}\\\" class=\\\"widget {{ definition.card }}\\\" style=\\\"{{ definition.style }}\\\"> <ngm-widget-content model=definition content=widget> </ngm-widget-content></div> \");}]);})(window);"]}