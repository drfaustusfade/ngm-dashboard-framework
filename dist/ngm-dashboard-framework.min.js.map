{"version":3,"sources":["ngm.js","column.js","dashboard.js","provider.js","row.js","widget-content.js","widget.js","ngm-dashboard-framework.tpl.js","ngm-dashboard-framework.min.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","ngmTemplatePath","rowTemplate","dashboard","restrict","replace","scope","column","editMode","ngmModel","options","templateUrl","link","$scope","$element","col","cid","id","cloned","append","$rootScope","stringToBoolean","string","isDefined","toLowerCase","Boolean","transclude","structure","name","collapsible","editable","maximizable","ngmWidgetFilter","controller","model","widgetFilter","structureName","updateWidgets","params","$broadcast","$watch","oldVal","newVal","rows","structures","copy","error","title","titleTemplateUrl","editClass","$attr","provider","widgets","widgetsPath","messageTemplate","loadingTemplate","this","widget","w","extend","reload","edit","path","template","$get","columnTemplate","row","columns","isArray","$q","$sce","$http","$templateCache","$controller","$injector","parseUrl","url","parsedUrl","indexOf","substring","getTemplate","deferred","defer","resolve","tpl","get","getTrustedResourceUrl","success","response","put","reject","promise","compileWidget","currentScope","content","html","templateScope","$new","config","base","parent","resolvers","$tpl","forEach","key","isString","invoke","all","then","locals","templateCtrl","controllerAs","children","data","contents","reason","msg","warn","$destroy","$on","event","preLink","definition","type","wid","fromJson","widgetState","isCollapsed","debug","postLink","compile","pre","post","run"],"mappings":"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","file":"ngm-dashboard-framework.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('ngm', ['ngm.provider'])\n  .value('ngmTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<ngm-dashboard-row row=\"row\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<ngm-dashboard-column column=\"column\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('ngmVersion', '<<ngmVersion>>');\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Patrick Fitzgerald\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('ngm')\n  .directive('ngmDashboardColumn', function ($log, $compile, ngmTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (w.wid === index){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if ( c.cid === index ){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the ngm id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('ngm-id');\n      return id ? parseInt(id) : -1;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        ngmModel: '=',\n        options: '='\n      },\n      templateUrl: ngmTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name ngm.directive:ngmDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `ngmDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} ngmModel model object of the dashboard.\n * @param {function=} ngmWidgetFilter function to filter widgets on the add dialog.\n */\n\nangular.module('ngm')\n  .directive('ngmDashboard', function ($rootScope, $log, dashboard, ngmTemplatePath) {\n    'use strict';\n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (!angular.isDefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        maximizable: '@',\n        ngmModel: '=',\n        ngmWidgetFilter: '='\n      },\n      controller: function($scope){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        // Update widget configs with broadcast\n        $scope.ngmModel.updateWidgets = function(params){\n          $scope.$broadcast( 'updateWidgetConfigs', params );\n        }        \n\n        // Watching for changes on ngmModel\n        $scope.$watch('ngmModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.ngmModel;\n            widgetFilter = $scope.ngmWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if (!model.title){\n                model.title = 'Dashboard';\n              }\n              if (!model.titleTemplateUrl) {\n                model.titleTemplateUrl = ngmTemplatePath + 'dashboard-title.html';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n      },\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible)\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: ngmTemplatePath + 'dashboard.html'\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name ngm.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('ngm.provider', [])\n  .provider('dashboard', function(){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n\n   /**\n    * @ngdoc method\n    * @name ngm.dashboardProvider#widget\n    * @methodOf ngm.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false}, widget);\n      if ( w.edit ){\n        var edit = {reload: true};\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name ngm.dashboardProvider#widgetsPath\n     * @methodOf ngm.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name ngm.dashboardProvider#structure\n    * @methodOf ngm.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name ngm.dashboardProvider#messageTemplate\n    * @methodOf ngm.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name ngm.dashboardProvider#loadingTemplate\n    * @methodOf ngm.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc service\n    * @name ngm.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n\n        /**\n         * @ngdoc method\n         * @name ngm.dashboard#id\n         * @methodOf ngm.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return ++cid;\n        }\n      };\n    };\n\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Patrick Fitzgerald\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('ngm')\n  .directive('ngmDashboardRow', function ($compile, ngmTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        ngmModel: '=',\n        editMode: '=',\n        options: '='\n      },\n      templateUrl: ngmTemplatePath + 'dashboard-row.html',\n      link: function ($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('ngm')\n  .directive('ngmWidgetContent', function($log, $q, $sce, $http, $templateCache,\n    $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url){\n      var parsedUrl = url;\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                       .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0){\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget){\n      var deferred = $q.defer();\n\n      if ( widget.template ){\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl){\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n            .success(function(response){\n              // put response to cache, with unmodified url as key\n              $templateCache.put(widget.templateUrl, response);\n              deferred.resolve(response);\n            })\n            .error(function(){\n              deferred.reject('could not load template');\n            });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        $element: $element.parent(),\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs){\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope){\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetReload', function(){\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetConfigChanged', function(event, params){\n          // Confirm this approach!\n          if ( $scope.model.widget === params.widget ) {\n            // extend widget config with params\n            angular.extend( $scope.model.config, params.config );\n            // ee-compile widget\n            currentScope = compileWidget( $scope, $element, currentScope );\n          }\n        });        \n      }\n    };\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Patrick Fitzgerald\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('ngm')\n  .directive('ngmWidget', function($log, dashboard, ngmTemplatePath) {\n\n    function preLink($scope){\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n\n          // set id for sortable\n          if (!definition.wid){\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n         if(!$scope.widgetState){\n             $scope.widgetState ={};\n             $scope.widgetState.isCollapsed= false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind reload function\n        $scope.reload = function(){\n          $scope.$broadcast('widgetReload');\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: ngmTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n\n      controller: function ($scope) {\n        // \n      },\n\n      compile: function compile(){\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n","angular.module(\"ngm\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div ngm-id={{column.cid}} class=col ng-class=column.styleClass ng-model=column.widgets> <ngm-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column options=options widget-state=widgetState>  </ngm-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<div class=\\\"{{ model.title.divClass }}\\\" style=\\\"{{ model.title.divStyle }}\\\"> <h2 class=\\\"{{ model.title.titleClass }}\\\" style=\\\"{{ model.title.titleStyle }}\\\"> {{ model.title.title }} </h2> <p class=\\\"{{ model.title.subtitleClass }}\\\" style=\\\"{{ model.title.subtitleStyle }}\\\"> {{ model.title.subtitle }} </p> </div> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard> <ngm-dashboard-row row=row ngm-model=model options=options ng-repeat=\\\"row in model.rows\\\"> </ngm-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div ngm-id=\\\"{{ definition.wid }}\\\" ngm-widget-type=\\\"{{ definition.type }}\\\" class=\\\"widget {{ definition.card }}\\\" style=\\\"{{ definition.style }}\\\"> <ngm-widget-content model=definition content=widget> </ngm-widget-content></div> \");}]);","!function(e,t){\"use strict\";angular.module(\"ngm\",[\"ngm.provider\"]).value(\"ngmTemplatePath\",\"../src/templates/\").value(\"rowTemplate\",'<ngm-dashboard-row row=\"row\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />').value(\"columnTemplate\",'<ngm-dashboard-column column=\"column\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />').value(\"ngmVersion\",\"0.0.3\"),angular.module(\"ngm\").directive(\"ngmDashboardColumn\",function(e,t,n,i,l){return{restrict:\"E\",replace:!0,scope:{column:\"=\",editMode:\"=\",ngmModel:\"=\",options:\"=\"},templateUrl:n+\"dashboard-column.html\",link:function(e,n){var o=e.column;o.cid||(o.cid=l.id()),t(i)(e,function(e){n.append(e)})}}}),angular.module(\"ngm\").directive(\"ngmDashboard\",function(e,t,n,i){function l(e){switch(angular.isDefined(e)?e.toLowerCase():null){case\"true\":case\"yes\":case\"1\":return!0;case\"false\":case\"no\":case\"0\":case null:return!1;default:return Boolean(e)}}return{replace:!0,restrict:\"EA\",transclude:!1,scope:{structure:\"@\",name:\"@\",collapsible:\"@\",editable:\"@\",maximizable:\"@\",ngmModel:\"=\",ngmWidgetFilter:\"=\"},controller:function(e){var l={},o={},r=null,a={};e.name;e.ngmModel.updateWidgets=function(t){e.$broadcast(\"updateWidgetConfigs\",t)},e.$watch(\"ngmModel\",function(d,s){(null!==s||null===d&&null===s)&&(l=e.ngmModel,r=e.ngmWidgetFilter,l&&l.rows||(a=e.structure,o=n.structures[a],o?(l?l.rows=angular.copy(o).rows:l=angular.copy(o),l.structure=a):t.error(\"could not find structure \"+a)),l?(l.title||(l.title=\"Dashboard\"),l.titleTemplateUrl||(l.titleTemplateUrl=i+\"dashboard-title.html\"),e.model=l):t.error(\"could not find or create model\"))},!0),e.editMode=!1,e.editClass=\"\"},link:function(e,t,n){var i={name:n.name,editable:!0,maximizable:l(n.maximizable),collapsible:l(n.collapsible)};angular.isDefined(n.editable)&&(i.editable=l(n.editable)),e.options=i},templateUrl:i+\"dashboard.html\"}}),angular.module(\"ngm.provider\",[]).provider(\"dashboard\",function(){var e={},t=\"\",n={},i='<div class=\"alert alert-danger\">{}</div>',l='      <div class=\"progress progress-striped active\">\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n          <span class=\"sr-only\">loading ...</span>\\n        </div>\\n      </div>';this.widget=function(t,n){var i=angular.extend({reload:!1},n);if(i.edit){var l={reload:!0};angular.extend(l,i.edit),i.edit=l}return e[t]=i,this},this.widgetsPath=function(e){return t=e,this},this.structure=function(e,t){return n[e]=t,this},this.messageTemplate=function(e){return i=e,this},this.loadingTemplate=function(e){return l=e,this},this.$get=function(){var o=0;return{widgets:e,widgetsPath:t,structures:n,messageTemplate:i,loadingTemplate:l,id:function(){return++o}}}}),angular.module(\"ngm\").directive(\"ngmDashboardRow\",function(e,t,n){return{restrict:\"E\",replace:!0,scope:{row:\"=\",ngmModel:\"=\",editMode:\"=\",options:\"=\"},templateUrl:t+\"dashboard-row.html\",link:function(t,i){angular.isDefined(t.row.columns)&&angular.isArray(t.row.columns)&&e(n)(t,function(e){i.append(e)})}}}),angular.module(\"ngm\").directive(\"ngmWidgetContent\",function(e,t,n,i,l,o,r,a,d){function s(e){var t=e;return e.indexOf(\"{widgetsPath}\")>=0&&(t=e.replace(\"{widgetsPath}\",d.widgetsPath).replace(\"//\",\"/\"),0===t.indexOf(\"/\")&&(t=t.substring(1))),t}function c(e){var o=t.defer();if(e.template)o.resolve(e.template);else if(e.templateUrl){var r=l.get(e.templateUrl);if(r)o.resolve(r);else{var a=n.getTrustedResourceUrl(s(e.templateUrl));i.get(a).success(function(t){l.put(e.templateUrl,t),o.resolve(t)}).error(function(){o.reject(\"could not load template\")})}}return o.promise}function u(n,i,l){var s=n.model,u=n.content;i.html(d.loadingTemplate);var m=n.$new();s.config||(s.config={}),m.config=s.config;var g={$scope:m,$element:i.parent(),widget:s,config:s.config},p={};return p.$tpl=c(u),u.resolve&&angular.forEach(u.resolve,function(e,t){angular.isString(e)?p[t]=a.get(e):p[t]=a.invoke(e,e,g)}),t.all(p).then(function(e){angular.extend(e,g);var t=e.$tpl;if(i.html(t),u.controller){var n=r(u.controller,e);u.controllerAs&&(m[u.controllerAs]=n),i.children().data(\"$ngControllerController\",n)}o(i.contents())(m)},function(t){var n=\"Could not resolve all promises\";t&&(n+=\": \"+t),e.warn(n),i.html(d.messageTemplate.replace(/{}/g,n))}),l&&l.$destroy(),m}return{replace:!0,restrict:\"EA\",transclude:!1,scope:{model:\"=\",content:\"=\"},link:function(e,t){var n=u(e,t,null);e.$on(\"widgetReload\",function(){n=u(e,t,n)}),e.$on(\"widgetConfigChanged\",function(i,l){e.model.widget===l.widget&&(angular.extend(e.model.config,l.config),n=u(e,t,n))})}}}),angular.module(\"ngm\").directive(\"ngmWidget\",function(e,t,n){function i(n){var i=n.definition;if(i){var l=t.widgets[i.type];if(l){i.wid||(i.wid=t.id()),n.widget=angular.copy(l);var o=i.config;o?angular.isString(o)&&(o=angular.fromJson(o)):o={},n.config=o,n.widgetState||(n.widgetState={},n.widgetState.isCollapsed=!1)}else e.warn(\"could not find widget \"+i.type)}else e.debug(\"definition not specified, widget was probably removed\")}function l(t,n){var i=t.definition;i?t.reload=function(){t.$broadcast(\"widgetReload\")}:e.debug(\"widget not found\")}return{replace:!0,restrict:\"EA\",transclude:!1,templateUrl:n+\"widget.html\",scope:{definition:\"=\",col:\"=column\",editMode:\"=\",options:\"=\",widgetState:\"=\"},controller:function(e){},compile:function(){return{pre:i,post:l}}}}),angular.module(\"ngm\").run([\"$templateCache\",function(e){e.put(\"../src/templates/dashboard-column.html\",'<div ngm-id={{column.cid}} class=col ng-class=column.styleClass ng-model=column.widgets> <ngm-widget ng-repeat=\"definition in column.widgets\" definition=definition column=column options=options widget-state=widgetState>  </ngm-widget></div> '),e.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \"),e.put(\"../src/templates/dashboard-title.html\",'<div class=model.title.divClass style=model.title.divStyle> <h2 class=\"{{ model.title.titleClass }}\" style=\"{{ model.title.titleStyle }}\"> {{ model.title.title }} </h2> <p class=\"{{ model.title.subtitleClass }}\" style=\"{{ model.title.subtitleStyle }}\"> {{ model.title.subtitle }} </p> </div> '),e.put(\"../src/templates/dashboard.html\",'<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard> <ngm-dashboard-row row=row ngm-model=model options=options ng-repeat=\"row in model.rows\"> </ngm-dashboard-row></div> </div> '),e.put(\"../src/templates/widget.html\",'<div ngm-id=\"{{ definition.wid }}\" ngm-widget-type=\"{{ definition.type }}\" class=\"widget {{ definition.card }}\" style=\"{{ definition.style }}\"> <ngm-widget-content model=definition content=widget> </ngm-widget-content></div> ')}])}(window);\n//# sourceMappingURL=ngm-dashboard-framework.min.js.map"],"sourceRoot":"/source/"}