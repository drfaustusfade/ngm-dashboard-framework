{"version":3,"sources":["column.js","dashboard.js","ngm.js","provider.js","row.js","widget-content.js","widget.js","ngmaterialize-dashboard-framework.min.js"],"names":["window","undefined","angular","module","directive","$log","$compile","ngmTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","findWidget","index","widget","i","length","w","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","parseInt","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","ngmModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$rootScope","stringToBoolean","string","toLowerCase","Boolean","transclude","structure","name","collapsible","editable","maximizable","ngmWidgetFilter","controller","widgetFilter","structureName","$watch","oldVal","newVal","structures","copy","error","title","titleTemplateUrl","editClass","$attr","value","provider","widgetsPath","messageTemplate","loadingTemplate","this","extend","reload","edit","path","template","$get","columnTemplate","row","$q","$sce","$http","$templateCache","$controller","$injector","parseUrl","url","parsedUrl","indexOf","substring","getTemplate","deferred","defer","resolve","tpl","get","getTrustedResourceUrl","success","response","put","reject","promise","compileWidget","currentScope","content","html","templateScope","$new","config","base","parent","resolvers","$tpl","forEach","key","isString","invoke","all","then","locals","templateCtrl","controllerAs","children","data","contents","reason","msg","$destroy","$on","event","params","preLink","definition","type","fromJson","widgetState","isCollapsed","debug","postLink","$broadcast","compile","pre","post","run"],"mappings":"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","file":"ngmaterialize-dashboard-framework.min.js","sourcesContent":["/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('ngm')\r\n  .directive('ngmDashboardColumn', function ($log, $compile, ngmTemplatePath, rowTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (w.wid === index){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if ( c.cid === index ){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the ngm id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('ngm-id');\r\n      return id ? parseInt(id) : -1;\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n\t\t\tif (!targetColumn.widgets) {\r\n\t\t\t\ttargetColumn.widgets = [];\r\n\t\t\t}\r\n\t\t\t\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.ngm-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        sortable.destroy();\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        ngmModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: ngmTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.ngmModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngm.directive:ngmDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `ngmDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} ngmModel model object of the dashboard.\r\n * @param {function=} ngmWidgetFilter function to filter widgets on the add dialog.\r\n */\r\n\r\nangular.module('ngm')\r\n  .directive('ngmDashboard', function ($rootScope, $log, dashboard, ngmTemplatePath) {\r\n    'use strict';\r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    function copyWidgets(source, target) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function fillStructure(root, columns, counter) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (!angular.isDefined(column.rows)){\r\n                copyWidgets(columns[counter], column);\r\n                counter++;\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            columns.push(col);\r\n            // keep reading columns until we can't any more\r\n            readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure){\r\n      var columns = readColumns(model);\r\n      var counter = 0;\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = fillStructure(model, columns, counter);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '@',\r\n        maximizable: '@',\r\n        ngmModel: '=',\r\n        ngmWidgetFilter: '='\r\n      },\r\n      controller: function($scope){\r\n        var model = {};\r\n        var structure = {};\r\n        var widgetFilter = null;\r\n        var structureName = {};\r\n        var name = $scope.name;\r\n\r\n        // Watching for changes on ngmModel\r\n        $scope.$watch('ngmModel', function(oldVal, newVal) {\r\n          // has model changed or is the model attribute not set\r\n          if (newVal !== null || (oldVal === null && newVal === null)) {\r\n            model = $scope.ngmModel;\r\n            widgetFilter = $scope.ngmWidgetFilter;\r\n            if ( ! model || ! model.rows ){\r\n              structureName = $scope.structure;\r\n              structure = dashboard.structures[structureName];\r\n              if (structure){\r\n                if (model){\r\n                  model.rows = angular.copy(structure).rows;\r\n                } else {\r\n                  model = angular.copy(structure);\r\n                }\r\n                model.structure = structureName;\r\n              } else {\r\n                $log.error( 'could not find structure ' + structureName);\r\n              }\r\n            }\r\n\r\n            if (model) {\r\n              if (!model.title){\r\n                model.title = 'Dashboard';\r\n              }\r\n              if (!model.titleTemplateUrl) {\r\n                model.titleTemplateUrl = ngmTemplatePath + 'dashboard-title.html';\r\n              }\r\n              $scope.model = model;\r\n            } else {\r\n              $log.error('could not find or create model');\r\n            }\r\n          }\r\n        }, true);\r\n\r\n        // edit mode\r\n        $scope.editMode = false;\r\n        $scope.editClass = '';\r\n\r\n      },\r\n      link: function ($scope, $element, $attr) {\r\n        // pass options to scope\r\n        var options = {\r\n          name: $attr.name,\r\n          editable: true,\r\n          maximizable: stringToBoolean($attr.maximizable),\r\n          collapsible: stringToBoolean($attr.collapsible)\r\n        };\r\n        if (angular.isDefined($attr.editable)){\r\n          options.editable = stringToBoolean($attr.editable);\r\n        }\r\n        $scope.options = options;\r\n      },\r\n      templateUrl: ngmTemplatePath + 'dashboard.html'\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('ngm', ['ngm.provider'])\r\n  .value('ngmTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<ngm-dashboard-row row=\"row\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<ngm-dashboard-column column=\"column\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('ngmVersion', '<<ngmVersion>>');\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name ngm.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('ngm.provider', [])\r\n  .provider('dashboard', function(){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name ngm.dashboardProvider#widget\r\n    * @methodOf ngm.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {reload: true};\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name ngm.dashboardProvider#widgetsPath\r\n     * @methodOf ngm.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name ngm.dashboardProvider#structure\r\n    * @methodOf ngm.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name ngm.dashboardProvider#messageTemplate\r\n    * @methodOf ngm.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name ngm.dashboardProvider#loadingTemplate\r\n    * @methodOf ngm.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name ngm.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name ngm.dashboard#id\r\n         * @methodOf ngm.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return ++cid;\r\n        }\r\n      };\r\n    };\r\n\r\n  });\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('ngm')\r\n  .directive('ngmDashboardRow', function ($compile, ngmTemplatePath, columnTemplate) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        ngmModel: '=',\r\n        editMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: ngmTemplatePath + 'dashboard-row.html',\r\n      link: function ($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('ngm')\r\n  .directive('ngmWidgetContent', function($log, $q, $sce, $http, $templateCache,\r\n    $compile, $controller, $injector, dashboard) {\r\n\r\n    function parseUrl(url){\r\n      var parsedUrl = url;\r\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                       .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0){\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    function getTemplate(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if ( widget.template ){\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl){\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n            .success(function(response){\r\n              // put response to cache, with unmodified url as key\r\n              $templateCache.put(widget.templateUrl, response);\r\n              deferred.resolve(response);\r\n            })\r\n            .error(function(){\r\n              deferred.reject('could not load template');\r\n            });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        $element: $element.parent(),\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs){\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope){\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetReload', function(){\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetConfigChanged', function(event, params){\r\n          // extend widget config with params\r\n          angular.extend($scope.model.config, params);\r\n          // ee-compile widget\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });        \r\n      }\r\n    };\r\n\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('ngm')\r\n  .directive('ngmWidget', function($log, dashboard, ngmTemplatePath) {\r\n\r\n    function preLink($scope){\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n\r\n          // set id for sortable\r\n          if (!definition.wid){\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n         if(!$scope.widgetState){\r\n             $scope.widgetState ={};\r\n             $scope.widgetState.isCollapsed= false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind reload function\r\n        $scope.reload = function(){\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: ngmTemplatePath + 'widget.html',\r\n      scope: {\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n\r\n      controller: function ($scope) {\r\n        // \r\n      },\r\n\r\n      compile: function compile(){\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n","!function(e,t){\"use strict\";angular.module(\"ngm\").directive(\"ngmDashboardColumn\",function(e,t,n,o,i){function r(e,t,n){var o=t.widgets;e.$apply(function(){o.splice(n.newIndex,0,o.splice(n.oldIndex,1)[0])})}function l(e,t){for(var n=null,o=0;o<e.widgets.length;o++){var i=e.widgets[o];if(i.wid===t){n=i;break}}return n}function a(e,t){for(var n=null,o=0;o<e.rows.length;o++){for(var i=e.rows[o],r=0;r<i.columns.length;r++){var l=i.columns[r];if(l.cid===t){n=l;break}l.rows&&(n=a(l,t))}if(n)break}return n}function d(e){var t=e.getAttribute(\"ngm-id\");return t?parseInt(t):-1}function s(t,n,o,i){var r=d(i.from),s=a(n,r);if(s){var c=d(i.item),u=l(s,c);u?t.$apply(function(){o.widgets||(o.widgets=[]),o.widgets.splice(i.newIndex,0,u)}):e.warn(\"could not find widget with id \"+c)}else e.warn(\"could not find column with id \"+r)}function c(e,t,n){e.$apply(function(){t.widgets.splice(n.oldIndex,1)})}function u(e,t,n,o){var i=t[0],l=Sortable.create(i,{group:\"widgets\",handle:\".ngm-move\",ghostClass:\"placeholder\",animation:150,onAdd:function(t){s(e,n,o,t)},onRemove:function(t){c(e,o,t)},onUpdate:function(t){r(e,o,t)}});t.on(\"$destroy\",function(){l.destroy()})}return{restrict:\"E\",replace:!0,scope:{column:\"=\",editMode:\"=\",ngmModel:\"=\",options:\"=\"},templateUrl:n+\"dashboard-column.html\",link:function(e,n){var r=e.column;r.cid||(r.cid=i.id()),angular.isDefined(r.rows)&&angular.isArray(r.rows)?t(o)(e,function(e){n.append(e)}):u(e,n,e.ngmModel,r)}}}),angular.module(\"ngm\").directive(\"ngmDashboard\",function(e,t,n,o){function i(e){switch(angular.isDefined(e)?e.toLowerCase():null){case\"true\":case\"yes\":case\"1\":return!0;case\"false\":case\"no\":case\"0\":case null:return!1;default:return Boolean(e)}}return{replace:!0,restrict:\"EA\",transclude:!1,scope:{structure:\"@\",name:\"@\",collapsible:\"@\",editable:\"@\",maximizable:\"@\",ngmModel:\"=\",ngmWidgetFilter:\"=\"},controller:function(e){{var i={},r={},l=null,a={};e.name}e.$watch(\"ngmModel\",function(d,s){(null!==s||null===d&&null===s)&&(i=e.ngmModel,l=e.ngmWidgetFilter,i&&i.rows||(a=e.structure,r=n.structures[a],r?(i?i.rows=angular.copy(r).rows:i=angular.copy(r),i.structure=a):t.error(\"could not find structure \"+a)),i?(i.title||(i.title=\"Dashboard\"),i.titleTemplateUrl||(i.titleTemplateUrl=o+\"dashboard-title.html\"),e.model=i):t.error(\"could not find or create model\"))},!0),e.editMode=!1,e.editClass=\"\"},link:function(e,t,n){var o={name:n.name,editable:!0,maximizable:i(n.maximizable),collapsible:i(n.collapsible)};angular.isDefined(n.editable)&&(o.editable=i(n.editable)),e.options=o},templateUrl:o+\"dashboard.html\"}}),angular.module(\"ngm\",[\"ngm.provider\"]).value(\"ngmTemplatePath\",\"../src/templates/\").value(\"rowTemplate\",'<ngm-dashboard-row row=\"row\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />').value(\"columnTemplate\",'<ngm-dashboard-column column=\"column\" ngm-model=\"ngmModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />').value(\"ngmVersion\",\"0.0.1\"),angular.module(\"ngm.provider\",[]).provider(\"dashboard\",function(){var e={},t=\"\",n={},o='<div class=\"alert alert-danger\">{}</div>',i='\\r\\n      <div class=\"progress progress-striped active\">\\n\\r\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\r\\n          <span class=\"sr-only\">loading ...</span>\\n\\r\\n        </div>\\n\\r\\n      </div>';this.widget=function(t,n){var o=angular.extend({reload:!1},n);if(o.edit){var i={reload:!0};angular.extend(i,o.edit),o.edit=i}return e[t]=o,this},this.widgetsPath=function(e){return t=e,this},this.structure=function(e,t){return n[e]=t,this},this.messageTemplate=function(e){return o=e,this},this.loadingTemplate=function(e){return i=e,this},this.$get=function(){var r=0;return{widgets:e,widgetsPath:t,structures:n,messageTemplate:o,loadingTemplate:i,id:function(){return++r}}}}),angular.module(\"ngm\").directive(\"ngmDashboardRow\",function(e,t,n){return{restrict:\"E\",replace:!0,scope:{row:\"=\",ngmModel:\"=\",editMode:\"=\",options:\"=\"},templateUrl:t+\"dashboard-row.html\",link:function(t,o){angular.isDefined(t.row.columns)&&angular.isArray(t.row.columns)&&e(n)(t,function(e){o.append(e)})}}}),angular.module(\"ngm\").directive(\"ngmWidgetContent\",function(e,t,n,o,i,r,l,a,d){function s(e){var t=e;return e.indexOf(\"{widgetsPath}\")>=0&&(t=e.replace(\"{widgetsPath}\",d.widgetsPath).replace(\"//\",\"/\"),0===t.indexOf(\"/\")&&(t=t.substring(1))),t}function c(e){var r=t.defer();if(e.template)r.resolve(e.template);else if(e.templateUrl){var l=i.get(e.templateUrl);if(l)r.resolve(l);else{var a=n.getTrustedResourceUrl(s(e.templateUrl));o.get(a).success(function(t){i.put(e.templateUrl,t),r.resolve(t)}).error(function(){r.reject(\"could not load template\")})}}return r.promise}function u(n,o,i){var s=n.model,u=n.content;o.html(d.loadingTemplate);var g=n.$new();s.config||(s.config={}),g.config=s.config;var m={$scope:g,$element:o.parent(),widget:s,config:s.config},p={};return p.$tpl=c(u),u.resolve&&angular.forEach(u.resolve,function(e,t){p[t]=angular.isString(e)?a.get(e):a.invoke(e,e,m)}),t.all(p).then(function(e){angular.extend(e,m);var t=e.$tpl;if(o.html(t),u.controller){var n=l(u.controller,e);u.controllerAs&&(g[u.controllerAs]=n),o.children().data(\"$ngControllerController\",n)}r(o.contents())(g)},function(t){var n=\"Could not resolve all promises\";t&&(n+=\": \"+t),e.warn(n),o.html(d.messageTemplate.replace(/{}/g,n))}),i&&i.$destroy(),g}return{replace:!0,restrict:\"EA\",transclude:!1,scope:{model:\"=\",content:\"=\"},link:function(e,t){var n=u(e,t,null);e.$on(\"widgetReload\",function(){n=u(e,t,n)}),e.$on(\"widgetConfigChanged\",function(o,i){angular.extend(e.model.config,i),n=u(e,t,n)})}}}),angular.module(\"ngm\").directive(\"ngmWidget\",function(e,t,n){function o(n){var o=n.definition;if(o){var i=t.widgets[o.type];if(i){o.wid||(o.wid=t.id()),n.widget=angular.copy(i);var r=o.config;r?angular.isString(r)&&(r=angular.fromJson(r)):r={},n.config=r,n.widgetState||(n.widgetState={},n.widgetState.isCollapsed=!1)}else e.warn(\"could not find widget \"+o.type)}else e.debug(\"definition not specified, widget was probably removed\")}function i(t,n){var o=t.definition;o?t.reload=function(){t.$broadcast(\"widgetReload\")}:e.debug(\"widget not found\")}return{replace:!0,restrict:\"EA\",transclude:!1,templateUrl:n+\"widget.html\",scope:{definition:\"=\",col:\"=column\",editMode:\"=\",options:\"=\",widgetState:\"=\"},controller:function(e){},compile:function(){return{pre:o,post:i}}}}),angular.module(\"ngm\").run([\"$templateCache\",function(e){e.put(\"../src/templates/dashboard-column.html\",'<div ngm-id={{column.cid}} class=col ng-class=column.styleClass ng-model=column.widgets> <ngm-widget ng-repeat=\"definition in column.widgets\" definition=definition column=column options=options widget-state=widgetState>  </ngm-widget></div> '),e.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \"),e.put(\"../src/templates/dashboard-title.html\",'<h3 class=\"header red-text text-lighten-2\"> {{model.title}} </h3> '),e.put(\"../src/templates/dashboard.html\",'<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard> <ngm-dashboard-row row=row ngm-model=model options=options ng-repeat=\"row in model.rows\"> </ngm-dashboard-row></div> </div> '),e.put(\"../src/templates/widget.html\",'<div ngm-id=\"{{ definition.wid }}\" ngm-widget-type=\"{{ definition.type }}\" class=\"widget {{ definition.card }}\"> <ngm-widget-content model=definition content=widget> </ngm-widget-content></div> ')}])}(window);\n//# sourceMappingURL=ngmaterialize-dashboard-framework.min.js.map"],"sourceRoot":"/source/"}